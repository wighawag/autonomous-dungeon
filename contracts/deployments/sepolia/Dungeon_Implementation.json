{
  "address": "0x5037228d4ee6103a5992b2DD0330f883FF885D70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Characters",
          "name": "characters",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        }
      ],
      "name": "CharacterEnterTheDungeon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "life",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "equipment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "combatStanceAvailable",
          "type": "uint16"
        }
      ],
      "name": "CharacterUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes24",
          "name": "commitmentHash",
          "type": "bytes24"
        }
      ],
      "name": "CommitmentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes24",
          "name": "commitmentHash",
          "type": "bytes24"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "position",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pickTreasure",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct Dungeon.Action[]",
          "name": "actions",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "bytes24",
          "name": "furtherActions",
          "type": "bytes24"
        }
      ],
      "name": "CommitmentResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        }
      ],
      "name": "CommitmentVoid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "epochHash",
          "type": "bytes32"
        }
      ],
      "name": "EpochHashUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "MonsterClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "MonsterDefeat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "goldBattle",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "monsterBattle",
          "type": "bytes32"
        }
      ],
      "name": "RoomUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "TimeIncreased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "characters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gold",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "life",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "equipment",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "combatStanceAvailable",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bytes24",
          "name": "hash",
          "type": "bytes24"
        },
        {
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "roomHashData",
          "type": "bytes32"
        }
      ],
      "name": "computeRoom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool[4]",
              "name": "exits",
              "type": "bool[4]"
            },
            {
              "internalType": "bool",
              "name": "treasure",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "monster",
              "type": "bool"
            }
          ],
          "internalType": "struct Dungeon.Room",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "goldBattles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentWinner",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "combatStance",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "increaseTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        },
        {
          "internalType": "bytes24",
          "name": "commitmentHash",
          "type": "bytes24"
        }
      ],
      "name": "makeCommitment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "monsterBattles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "life",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "monsterClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Characters",
          "name": "charactersCollection",
          "type": "address"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterID",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "position",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pickTreasure",
              "type": "bool"
            }
          ],
          "internalType": "struct Dungeon.Action[]",
          "name": "actions",
          "type": "tuple[]"
        },
        {
          "internalType": "uint16",
          "name": "combatStance",
          "type": "uint16"
        },
        {
          "internalType": "bytes24",
          "name": "furtherActions",
          "type": "bytes24"
        }
      ],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "roomCoords",
      "outputs": [
        {
          "internalType": "int32",
          "name": "x",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "y",
          "type": "int32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "roomHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        },
        {
          "internalType": "int32",
          "name": "x",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "y",
          "type": "int32"
        }
      ],
      "name": "roomHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int32",
          "name": "x",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "y",
          "type": "int32"
        }
      ],
      "name": "roomID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c7464e0b18d87ff940298ddcb19ea98078771c64d6b307e7711d6944281a5eb",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x5037228d4ee6103a5992b2DD0330f883FF885D70",
    "transactionIndex": 45,
    "gasUsed": "2033301",
    "logsBloom": "0x
    "blockHash": "0xd0132a6968a58e075e437d3f27323ee01572382e984488e42b30d9c8caf9a291",
    "transactionHash": "0x7c7464e0b18d87ff940298ddcb19ea98078771c64d6b307e7711d6944281a5eb",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 3542402,
        "transactionHash": "0x7c7464e0b18d87ff940298ddcb19ea98078771c64d6b307e7711d6944281a5eb",
        "address": "0x5037228d4ee6103a5992b2DD0330f883FF885D70",
        "topics": [
          "0xec99e9b645e0d752776aecb3a31c64ae23b491afeae29a072a0eaa66aa9a3862",
          "0x0000000000000000000000000000000000000000000000000000000000004c2d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 72,
        "blockHash": "0xd0132a6968a58e075e437d3f27323ee01572382e984488e42b30d9c8caf9a291"
      }
    ],
    "blockNumber": 3542402,
    "cumulativeGasUsed": "8391814",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb0360B510Be1AD9d656BB45B1EB9fA668dDeB021"
  ],
  "numDeployments": 1,
  "solcInputHash": "dd10a42ce07f21a083a7ea04090d94a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Characters\",\"name\":\"characters\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"}],\"name\":\"CharacterEnterTheDungeon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"life\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"equipment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"combatStanceAvailable\",\"type\":\"uint16\"}],\"name\":\"CharacterUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes24\",\"name\":\"commitmentHash\",\"type\":\"bytes24\"}],\"name\":\"CommitmentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes24\",\"name\":\"commitmentHash\",\"type\":\"bytes24\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pickTreasure\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct Dungeon.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bytes24\",\"name\":\"furtherActions\",\"type\":\"bytes24\"}],\"name\":\"CommitmentResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"CommitmentVoid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"epochHash\",\"type\":\"bytes32\"}],\"name\":\"EpochHashUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"MonsterClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"MonsterDefeat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"goldBattle\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"monsterBattle\",\"type\":\"bytes32\"}],\"name\":\"RoomUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"TimeIncreased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"characters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"life\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"equipment\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"combatStanceAvailable\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bytes24\",\"name\":\"hash\",\"type\":\"bytes24\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"roomHashData\",\"type\":\"bytes32\"}],\"name\":\"computeRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"bool[4]\",\"name\":\"exits\",\"type\":\"bool[4]\"},{\"internalType\":\"bool\",\"name\":\"treasure\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"monster\",\"type\":\"bool\"}],\"internalType\":\"struct Dungeon.Room\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"goldBattles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentWinner\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"combatStance\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"increaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"},{\"internalType\":\"bytes24\",\"name\":\"commitmentHash\",\"type\":\"bytes24\"}],\"name\":\"makeCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monsterBattles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"life\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monsterClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Characters\",\"name\":\"charactersCollection\",\"type\":\"address\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pickTreasure\",\"type\":\"bool\"}],\"internalType\":\"struct Dungeon.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"combatStance\",\"type\":\"uint16\"},{\"internalType\":\"bytes24\",\"name\":\"furtherActions\",\"type\":\"bytes24\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"roomCoords\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"x\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"y\",\"type\":\"int32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"roomHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"x\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"y\",\"type\":\"int32\"}],\"name\":\"roomHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"x\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"y\",\"type\":\"int32\"}],\"name\":\"roomID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/TimeControlledDungeon.sol\":\"TimeControlledDungeon\"},\"evmVersion\":\"shanghai\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363834383332343131383336\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"forge-deploy-proxy/src/ForgeDeploy_Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC165/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n\\t/// @notice Query if a contract implements an interface\\n\\t/// @param interfaceID The interface identifier, as specified in ERC-165\\n\\t/// @dev Interface identification is specified in ERC-165. This function\\n\\t///  uses less than 30,000 gas.\\n\\t/// @return `true` if the contract implements `interfaceID` and\\n\\t///  `interfaceID` is not 0xffffffff, `false` otherwise\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x036eb02f585d3f298df9fc1470e1d761b74e86793b6c27d8d8608620146b3cf9\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/BasicERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IERC721WithBlocknumber.sol\\\";\\nimport \\\"./ImplementingERC721Internal.sol\\\";\\n\\nimport \\\"../../openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract BasicERC721 is IERC721, IERC721WithBlocknumber, ImplementingERC721Internal {\\n\\tusing Openzeppelin_Address for address;\\n\\n\\tbytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n\\n\\tuint256 internal constant OPERATOR_FLAG = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\tmapping(uint256 => uint256) internal _owners;\\n\\tmapping(address => uint256) internal _balances;\\n\\tmapping(address => mapping(address => bool)) internal _operatorsForAll;\\n\\tmapping(uint256 => address) internal _operators;\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction approve(address operator, uint256 tokenID) external override {\\n\\t\\t(address owner, uint256 nonce) = _ownerAndNonceOf(tokenID);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenID);\\n\\t\\t}\\n\\t\\tif (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) {\\n\\t\\t\\trevert NotAuthorized();\\n\\t\\t}\\n\\t\\t_approveFor(owner, nonce, operator, tokenID);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID\\n\\t) external override {\\n\\t\\t(address owner, uint256 nonce, bool operatorEnabled) = _ownerNonceAndOperatorEnabledOf(tokenID);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenID);\\n\\t\\t}\\n\\t\\tif (from != owner) {\\n\\t\\t\\trevert NotOwner(from, owner);\\n\\t\\t}\\n\\t\\tif (to == address(0) || to == address(this)) {\\n\\t\\t\\trevert InvalidAddress(to);\\n\\t\\t}\\n\\t\\tif (msg.sender != from) {\\n\\t\\t\\tif (!(operatorEnabled && _operators[tokenID] == msg.sender) && !isApprovedForAll(from, msg.sender)) {\\n\\t\\t\\t\\trevert NotAuthorized();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_transferFrom(from, to, tokenID, (nonce >> 24) != 0);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID\\n\\t) external override {\\n\\t\\tsafeTransferFrom(from, to, tokenID, \\\"\\\");\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction setApprovalForAll(address operator, bool approved) external override {\\n\\t\\t_setApprovalForAll(msg.sender, operator, approved);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction balanceOf(address owner) public view virtual override returns (uint256 balance) {\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert InvalidAddress(owner);\\n\\t\\t}\\n\\t\\tbalance = _balances[owner];\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction ownerOf(uint256 tokenID) external view override returns (address owner) {\\n\\t\\towner = _ownerOf(tokenID);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenID);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction getApproved(uint256 tokenID) external view override returns (address operator) {\\n\\t\\t(address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(tokenID);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenID);\\n\\t\\t}\\n\\t\\tif (operatorEnabled) {\\n\\t\\t\\treturn _operators[tokenID];\\n\\t\\t} else {\\n\\t\\t\\treturn address(0);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool isOperator) {\\n\\t\\treturn _operatorsForAll[owner][operator];\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID,\\n\\t\\tbytes memory data\\n\\t) public override {\\n\\t\\t(address owner, uint256 nonce, bool operatorEnabled) = _ownerNonceAndOperatorEnabledOf(tokenID);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenID);\\n\\t\\t}\\n\\t\\tif (owner != from) {\\n\\t\\t\\trevert NotOwner(from, owner);\\n\\t\\t}\\n\\n\\t\\tif (to == address(0) || to == address(this)) {\\n\\t\\t\\trevert InvalidAddress(to);\\n\\t\\t}\\n\\n\\t\\tif (msg.sender != from) {\\n\\t\\t\\tif (!(operatorEnabled && _operators[tokenID] == msg.sender) && !isApprovedForAll(from, msg.sender)) {\\n\\t\\t\\t\\trevert NotAuthorized();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_safeTransferFrom(from, to, tokenID, (nonce >> 24) != 0, data);\\n\\t}\\n\\n\\t/// @inheritdoc IERC165\\n\\tfunction supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n\\t\\t/// 0x01ffc9a7 is ERC165.\\n\\t\\t/// 0x80ac58cd is ERC721\\n\\t\\t/// 0x5b5e139f is for ERC721 metadata\\n\\t\\treturn interfaceID == 0x01ffc9a7 || interfaceID == 0x80ac58cd || interfaceID == 0x5b5e139f;\\n\\t}\\n\\n\\t/// @inheritdoc IERC721WithBlocknumber\\n\\tfunction ownerAndLastTransferBlockNumberOf(uint256 tokenID)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (address owner, uint256 blockNumber)\\n\\t{\\n\\t\\t(address currentOwner, uint256 nonce) = _ownerAndNonceOf(tokenID);\\n\\t\\towner = currentOwner;\\n\\t\\tblockNumber = (nonce >> 24);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721WithBlocknumber\\n\\tfunction ownerAndLastTransferBlockNumberList(uint256[] calldata tokenIDs)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (OwnerData[] memory ownersData)\\n\\t{\\n\\t\\townersData = new OwnerData[](tokenIDs.length);\\n\\t\\tfor (uint256 i = 0; i < tokenIDs.length; i++) {\\n\\t\\t\\tuint256 data = _owners[tokenIDs[i]];\\n\\t\\t\\townersData[i].owner = address(uint160(data));\\n\\t\\t\\townersData[i].lastTransferBlockNumber = (data >> 184) & 0xFFFFFFFFFFFFFFFF;\\n\\t\\t}\\n\\t}\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// INTERNALS\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\n\\tfunction _safeMint(address to, uint256 tokenID) internal {\\n\\t\\t_safeTransferFrom(address(0), to, tokenID, false, \\\"\\\");\\n\\t}\\n\\n\\tfunction _safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID,\\n\\t\\tbool registered,\\n\\t\\tbytes memory data\\n\\t) internal {\\n\\t\\t_transferFrom(from, to, tokenID, registered);\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\tif (!_checkOnERC721Received(msg.sender, from, to, tokenID, data)) {\\n\\t\\t\\t\\trevert TransferRejected();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID,\\n\\t\\tbool registered\\n\\t) internal virtual {\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[to]++;\\n\\t\\t\\tif (registered) {\\n\\t\\t\\t\\t_balances[from]--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// We encode the blockNumber in the token nonce. We can then use it for count voting.\\n\\t\\t_owners[tokenID] = (block.number << 184) | uint256(uint160(to));\\n\\t\\temit Transfer(from, to, tokenID);\\n\\t}\\n\\n\\t/// @dev See approve.\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce,\\n\\t\\taddress operator,\\n\\t\\tuint256 tokenID\\n\\t) internal override {\\n\\t\\tuint256 blockNumber = nonce >> 24;\\n\\t\\tuint256 newNonce = nonce + 1;\\n\\t\\tif (newNonce >> 24 != blockNumber) {\\n\\t\\t\\trevert NonceOverflow();\\n\\t\\t}\\n\\t\\tif (operator == address(0)) {\\n\\t\\t\\t_owners[tokenID] = (newNonce << 160) | uint256(uint160(owner));\\n\\t\\t} else {\\n\\t\\t\\t_owners[tokenID] = OPERATOR_FLAG | ((newNonce << 160) | uint256(uint160(owner)));\\n\\t\\t\\t_operators[tokenID] = operator;\\n\\t\\t}\\n\\t\\temit Approval(owner, operator, tokenID);\\n\\t}\\n\\n\\t/// @dev See setApprovalForAll.\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress sender,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal override {\\n\\t\\t_operatorsForAll[sender][operator] = approved;\\n\\n\\t\\temit ApprovalForAll(sender, operator, approved);\\n\\t}\\n\\n\\t/// @dev Check if receiving contract accepts erc721 transfers.\\n\\t/// @param operator The address of the operator.\\n\\t/// @param from The from address, may be different from msg.sender.\\n\\t/// @param to The adddress we want to transfer to.\\n\\t/// @param tokenID The id of the token we would like to transfer.\\n\\t/// @param data Any additional data to send with the transfer.\\n\\t/// @return Whether the expected value of 0x150b7a02 is returned.\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID,\\n\\t\\tbytes memory data\\n\\t) internal returns (bool) {\\n\\t\\tbytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, tokenID, data);\\n\\t\\treturn (retval == ERC721_RECEIVED);\\n\\t}\\n\\n\\t/// @dev Get the owner of a token.\\n\\t/// @param tokenID The token to query.\\n\\tfunction _ownerOf(uint256 tokenID) internal view virtual returns (address owner) {\\n\\t\\treturn address(uint160(_owners[tokenID]));\\n\\t}\\n\\n\\t/// @dev Get the owner and operatorEnabled status of a token.\\n\\t/// @param tokenID The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return operatorEnabled Whether or not operators are enabled for this token.\\n\\tfunction _ownerAndOperatorEnabledOf(uint256 tokenID)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (address owner, bool operatorEnabled)\\n\\t{\\n\\t\\tuint256 data = _owners[tokenID];\\n\\t\\towner = address(uint160(data));\\n\\t\\toperatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n\\t}\\n\\n\\t/// @dev Get the owner and the permit nonce of a token.\\n\\t/// @param tokenID The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return nonce the nonce for permit (also incluse the blocknumer in the 64 higer bits (88 bits in total))\\n\\tfunction _ownerAndNonceOf(uint256 tokenID) internal view virtual override returns (address owner, uint256 nonce) {\\n\\t\\tuint256 data = _owners[tokenID];\\n\\t\\towner = address(uint160(data));\\n\\t\\tnonce = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t}\\n\\n\\t// @dev Get the owner, the permit nonce of a token and operatorEnabled status of a token.\\n\\t/// @param tokenID The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return nonce the nonce for permit (also incluse the blocknumer in the 64 higer bits (88 bits in total))\\n\\t/// @return operatorEnabled Whether or not operators are enabled for this token.\\n\\tfunction _ownerNonceAndOperatorEnabledOf(uint256 tokenID)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (\\n\\t\\t\\taddress owner,\\n\\t\\t\\tuint256 nonce,\\n\\t\\t\\tbool operatorEnabled\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 data = _owners[tokenID];\\n\\t\\towner = address(uint160(data));\\n\\t\\toperatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n\\t\\tnonce = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf0f692fd8f92f3860a2caee0dceb1178eab4fc0aaf23590f81b16274b738190e\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/ImplementingERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ImplementingERC721Internal {\\n\\tfunction _ownerAndNonceOf(uint256 tokenID) internal view virtual returns (address owner, uint256 nonce);\\n\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce,\\n\\t\\taddress operator,\\n\\t\\tuint256 tokenID\\n\\t) internal virtual;\\n\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress sender,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal virtual;\\n}\\n\",\"keccak256\":\"0xfb4e33ff8e5bf69da8c47bc7d3bf3544b440383efebc5bc8ca412ebab35e2824\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../ERC165/interfaces/IERC165.sol\\\";\\nimport \\\"../../utils/GenericErrors.sol\\\";\\n\\ninterface IERC721Supply {\\n\\t/// @notice return the total number of token in existence\\n\\tfunction totalSupply() external view returns (uint256);\\n}\\n\\ninterface IERC721 is IERC165 {\\n\\t/// @notice Triggered when a token is transferred\\n\\t/// @param from the account the token is sent from\\n\\t/// @param to the account the token is sent to\\n\\t/// @param tokenID id of the token being sent\\n\\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenID);\\n\\n\\t/// @notice Triggered when a token is approved to be sent by another account\\n\\t///  Note tat the approval get reset when a Transfer event for that same token is emitted.\\n\\t/// @param owner current owner of the token\\n\\t/// @param approved account who can know transfer on the owner's behalf\\n\\t/// @param tokenID id of the token being approved\\n\\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenID);\\n\\n\\t/// @notice Triggered when an account approve or disaprove another to transfer on its behalf\\n\\t/// @param owner the account granting rights over all of its token\\n\\t/// @param operator account who can know transfer on the owner's behalf\\n\\t/// @param approved whether it is approved or not\\n\\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\\t/// @notice The token does not exist\\n\\t/// @param tokenID id of the expected token\\n\\terror NonExistentToken(uint256 tokenID);\\n\\t/// @notice The address from which the token is sent is not the current owner\\n\\t/// @param provided the address expected to be the current owner\\n\\t/// @param currentOwner the current owner\\n\\terror NotOwner(address provided, address currentOwner);\\n\\t/// @notice An invalid address is specified (for example: zero address)\\n\\t/// @param addr invalid address\\n\\terror InvalidAddress(address addr);\\n\\t/// @notice The Transfer was rejected by the destination\\n\\terror TransferRejected();\\n\\t/// @notice The Nonce overflowed, make a transfer to self to allow new nonces.\\n\\terror NonceOverflow();\\n\\n\\t/// @notice Get the number of tokens owned by an address.\\n\\t/// @param owner The address to look for.\\n\\t/// @return balance The number of tokens owned by the address.\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\t/// @notice Get the owner of a token.\\n\\t/// @param tokenID The id of the token.\\n\\t/// @return owner The address of the token owner.\\n\\tfunction ownerOf(uint256 tokenID) external view returns (address owner);\\n\\n\\t/// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n\\t/// @param from The sender of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param tokenID The id of the token.\\n\\t/// @param data Additional data.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\t/// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n\\t/// @param from The send of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param tokenID The id of the token.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID\\n\\t) external;\\n\\n\\t/// @notice Transfer a token between 2 addresses.\\n\\t/// @param from The sender of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param tokenID The id of the token.\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID\\n\\t) external;\\n\\n\\t/// @notice Approve an operator to transfer a specific token on the senders behalf.\\n\\t/// @param operator The address receiving the approval.\\n\\t/// @param tokenID The id of the token.\\n\\tfunction approve(address operator, uint256 tokenID) external;\\n\\n\\t/// @notice Set the approval for an operator to manage all the tokens of the sender.\\n\\t/// @param operator The address receiving the approval.\\n\\t/// @param approved The determination of the approval.\\n\\tfunction setApprovalForAll(address operator, bool approved) external;\\n\\n\\t/// @notice Get the approved operator for a specific token.\\n\\t/// @param tokenID The id of the token.\\n\\t/// @return operator The address of the operator.\\n\\tfunction getApproved(uint256 tokenID) external view returns (address operator);\\n\\n\\t/// @notice Check if the sender approved the operator to transfer any of its tokens.\\n\\t/// @param owner The address of the owner.\\n\\t/// @param operator The address of the operator.\\n\\t/// @return isOperator The status of the approval.\\n\\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4df60787dd909ce77b09140217d364b2892756586b187f74035082e47ecfcd17\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Receiver {\\n\\t/// @notice Handle the receipt of an NFT\\n\\t/// @dev The ERC721 smart contract calls this function on the recipient\\n\\t///  after a `transfer`. This function MAY throw to revert and reject the\\n\\t///  transfer. Return of other than the magic value MUST result in the\\n\\t///  transaction being reverted.\\n\\t///  Note: the contract address is always the message sender.\\n\\t/// @param operator The address which called `safeTransferFrom` function\\n\\t/// @param from The address which previously owned the token\\n\\t/// @param tokenID The NFT identifier which is being transferred\\n\\t/// @param data Additional data with no specified format\\n\\t/// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n\\t///  unless throwing\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenID,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x1d23357c0e47a1577b28f87d36457cb1bfba01b3d2d807cbda6ee476b9f84b30\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721WithBlocknumber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721WithBlocknumber {\\n\\t/// @notice Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism.\\n\\t/// @param tokenID The id of the token.\\n\\t/// @return owner The address of the token owner.\\n\\t/// @return blockNumber The blocknumber at which the last transfer of that id happened.\\n\\tfunction ownerAndLastTransferBlockNumberOf(uint256 tokenID)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address owner, uint256 blockNumber);\\n\\n\\tstruct OwnerData {\\n\\t\\taddress owner;\\n\\t\\tuint256 lastTransferBlockNumber;\\n\\t}\\n\\n\\t/// @notice Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\\n\\t/// @param tokenIDs The list of token ids to check.\\n\\t/// @return ownersData The list of (owner, lastTransferBlockNumber) for each ids given as input.\\n\\tfunction ownerAndLastTransferBlockNumberList(uint256[] calldata tokenIDs)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (OwnerData[] memory ownersData);\\n}\\n\",\"keccak256\":\"0x984c7ea95237ebb72d22b4bbc9ecddee00a33be1daf476fb6333e09136f08fc9\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Openzeppelin_Address {\\n\\t/**\\n\\t * @dev Returns true if `account` is a contract.\\n\\t *\\n\\t * [IMPORTANT]\\n\\t * ====\\n\\t * It is unsafe to assume that an address for which this function returns\\n\\t * false is an externally-owned account (EOA) and not a contract.\\n\\t *\\n\\t * Among others, `isContract` will return false for the following\\n\\t * types of addresses:\\n\\t *\\n\\t *  - an externally-owned account\\n\\t *  - a contract in construction\\n\\t *  - an address where a contract will be created\\n\\t *  - an address where a contract lived, but was destroyed\\n\\t * ====\\n\\t *\\n\\t * [IMPORTANT]\\n\\t * ====\\n\\t * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n\\t *\\n\\t * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n\\t * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n\\t * constructor.\\n\\t * ====\\n\\t */\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\t// This method relies on extcodesize/address.code.length, which returns 0\\n\\t\\t// for contracts in construction, since the code is only stored at the end\\n\\t\\t// of the constructor execution.\\n\\n\\t\\treturn account.code.length > 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n\\t * `recipient`, forwarding all available gas and reverting on errors.\\n\\t *\\n\\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n\\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n\\t * imposed by `transfer`, making them unable to receive funds via\\n\\t * `transfer`. {sendValue} removes this limitation.\\n\\t *\\n\\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n\\t *\\n\\t * IMPORTANT: because control is transferred to `recipient`, care must be\\n\\t * taken to not create reentrancy vulnerabilities. Consider using\\n\\t * {ReentrancyGuard} or the\\n\\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n\\t */\\n\\tfunction sendValue(address payable recipient, uint256 amount) internal {\\n\\t\\trequire(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n\\t\\t(bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n\\t\\trequire(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Performs a Solidity function call using a low level `call`. A\\n\\t * plain `call` is an unsafe replacement for a function call: use this\\n\\t * function instead.\\n\\t *\\n\\t * If `target` reverts with a revert reason, it is bubbled up by this\\n\\t * function (like regular Solidity function calls).\\n\\t *\\n\\t * Returns the raw returned data. To convert to the expected return value,\\n\\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `target` must be a contract.\\n\\t * - calling `target` with `data` must not revert.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"Address: low-level call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n\\t * `errorMessage` as a fallback revert reason when `target` reverts.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, 0, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but also transferring `value` wei to `target`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the calling contract must have an ETH balance of at least `value`.\\n\\t * - the called Solidity function must be `payable`.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCallWithValue(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tuint256 value\\n\\t) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n\\t * with `errorMessage` as a fallback revert reason when `target` reverts.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCallWithValue(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tuint256 value,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n\\t\\trequire(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.call{value: value}(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but performing a static call.\\n\\t *\\n\\t * _Available since v3.3._\\n\\t */\\n\\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n\\t\\treturn functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n\\t * but performing a static call.\\n\\t *\\n\\t * _Available since v3.3._\\n\\t */\\n\\tfunction functionStaticCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal view returns (bytes memory) {\\n\\t\\trequire(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.staticcall(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but performing a delegate call.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n\\t * but performing a delegate call.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction functionDelegateCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.delegatecall(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n\\t * revert reason using the provided one.\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction verifyCallResult(\\n\\t\\tbool success,\\n\\t\\tbytes memory returndata,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (bytes memory) {\\n\\t\\tif (success) {\\n\\t\\t\\treturn returndata;\\n\\t\\t} else {\\n\\t\\t\\t// Look for revert reason and bubble it up if present\\n\\t\\t\\tif (returndata.length > 0) {\\n\\t\\t\\t\\t// The easiest way to bubble the revert reason is using memory via assembly\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(returndata)\\n\\t\\t\\t\\t\\trevert(add(32, returndata), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(errorMessage);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xda14142ec34e7dde33eabb747152062eb9d9aad16036f6498340418f59c83c97\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/utils/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Not authorized to perform this operation\\nerror NotAuthorized();\\n\",\"keccak256\":\"0x333aa48943e66849a9350384e7ec2553b93e8a8a12b8ad300d3341f7c98b60fd\",\"license\":\"MIT\"},\"src/Characters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Vessels.sol\\\";\\n\\ncontract Characters is Vessels {\\n    function mint(uint256 tokenID, address to) external {\\n        // return _safeMint(to, id);\\n        return _transferFrom(address(0), to, tokenID, false);\\n    }\\n}\\n\",\"keccak256\":\"0xce3adcbc22d1180b802679c70b56363a5933fd22fc6b3653cf5e512dd046b726\",\"license\":\"AGPL-3.0\"},\"src/Dungeon.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"forge-deploy-proxy/src/ForgeDeploy_Proxied.sol\\\";\\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\nimport \\\"./Extraction.sol\\\";\\nimport \\\"./Characters.sol\\\";\\nimport \\\"./UsingInternalTimestamp.sol\\\";\\n\\ncontract Dungeon is Proxied, UsingInternalTimestamp {\\n    // ----------------------------------------------------------------------------------------------\\n    // CONSTANTS\\n    // ----------------------------------------------------------------------------------------------\\n\\n    uint256 constant TOTAL = 24 * 3600;\\n    uint256 constant ACTION_PERIOD = 23 * 3600;\\n    uint256 constant START_TIMESTAMP = 0;\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // EVENTS\\n    // ----------------------------------------------------------------------------------------------\\n    event CommitmentMade(uint256 indexed characterID, uint32 indexed epoch, bytes24 commitmentHash);\\n    event CommitmentVoid(uint256 indexed characterID, uint32 indexed epoch);\\n    event CommitmentResolved(\\n        uint256 indexed characterID,\\n        uint32 indexed epoch,\\n        bytes24 indexed commitmentHash,\\n        Action[] actions,\\n        bytes24 furtherActions\\n    );\\n\\n    event CharacterUpdate(\\n        uint256 indexed characterID,\\n        uint256 indexed position,\\n        uint8 life,\\n        uint256 gold,\\n        bytes32 equipment,\\n        uint16 combatStanceAvailable\\n    );\\n    event RoomUpdate(uint256 indexed position, bytes32 goldBattle, bytes32 monsterBattle);\\n    event EpochHashUpdate(uint256 indexed epoch, bytes32 epochHash);\\n    event CharacterEnterTheDungeon(address indexed player, uint256 indexed characterID);\\n    event MonsterClaim(uint256 indexed characterID, uint256 indexed position, uint256 indexed epoch);\\n    event MonsterDefeat(uint256 indexed position, uint256 indexed epoch);\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // STORAGE TYPES\\n    // ----------------------------------------------------------------------------------------------\\n\\n    struct Character {\\n        uint256 position;\\n        uint256 gold;\\n        // TODO xp\\n        uint8 life;\\n        bytes32 equipment;\\n        uint16 combatStanceAvailable;\\n    }\\n\\n    // struct RoomStatus {\\n    //     bytes32 goldBattle; // this represent a battle against other character with gold given to winner\\n    //     bytes32 monsterBattle; // this represent a battle against a monster with loot shared (based on success? // or same/similar like goldBattle)\\n    // }\\n\\n    struct GoldBattle {\\n        uint256 currentWinner;\\n        uint16 combatStance;\\n    }\\n\\n    struct MonsterBattle {\\n        uint256 life; // when max uint player have the drop, but it is only given onchain on next epoch reveal (it is always given, event on death)\\n    }\\n\\n    struct Commitment {\\n        bytes24 hash;\\n        uint32 epoch;\\n    }\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // MEMORY ONLY TYPES\\n    // ----------------------------------------------------------------------------------------------\\n\\n    // this only track what changes\\n    // when life is zero,\\n    // gold and equiipment are considered taken\\n    // uint256 gold;\\n    // bytes32 equipment;\\n\\n    struct Monster {\\n        uint8 life;\\n        uint16 combatStance;\\n    }\\n\\n    struct Action {\\n        uint256 position; // TODO uint64\\n        bool pickTreasure;\\n    }\\n\\n    struct Room {\\n        bool[4] exits;\\n        bool treasure;\\n        bool monster;\\n    }\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // STORAGE\\n    // ----------------------------------------------------------------------------------------------\\n\\n    mapping(uint256 => mapping(uint256 => GoldBattle)) public goldBattles; // we use epoch to ensure not reading from last // TODO optimize by keeping track of epoch used instead of mapping\\n    mapping(uint256 => mapping(uint256 => MonsterBattle)) public monsterBattles; // per epoch, so player can claim later: TODO document the 2 and half phase system\\n    mapping(uint256 => uint256) public monsterClaims;\\n    mapping(uint256 => Character) public characters;\\n    mapping(uint256 => address) public owners;\\n    mapping(uint256 => Commitment) public commitments;\\n\\n    bytes32 internal epochHash_0;\\n    bytes32 internal epochHash_1;\\n\\n    Characters immutable characterTokens;\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // CONSTRUCTOR / INITIALIZER\\n    // ----------------------------------------------------------------------------------------------\\n\\n    constructor(Characters charactersCollection) {\\n        characterTokens = charactersCollection;\\n        postUpgrade(charactersCollection);\\n    }\\n\\n    function postUpgrade(Characters charactersCollection) public proxied {\\n        if (charactersCollection != characterTokens) {\\n            revert(\\\"characterTokens is immutable\\\");\\n        }\\n\\n        (uint32 epoch, bool commiting) = _epoch();\\n        // this is the first event, signaling to the indexer the first hash and epoch\\n        _handleEpochHash(commiting ? epoch - 1 : epoch, bytes32(0));\\n    }\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // PUBLIC INTERFACE\\n    // ----------------------------------------------------------------------------------------------\\n\\n    function enter() external payable {\\n        require(msg.value == 1000000000000000, \\\"GIVE ME THE KWEI\\\");\\n        // for now we just associate character with wallet\\n        // TODO\\n        // TODO leaving\\n        uint256 characterID = uint256(uint160(msg.sender));\\n        require(owners[characterID] == address(0), \\\"ALREADY_IN\\\");\\n        characterTokens.mint(characterID, address(this));\\n        owners[characterID] = msg.sender;\\n        emit CharacterEnterTheDungeon(msg.sender, characterID);\\n\\n        _handleCharacter(\\n            characterID, Character({position: 0, life: 3, gold: 0, equipment: bytes32(0), combatStanceAvailable: 511})\\n        );\\n    }\\n\\n    function makeCommitment(uint256 characterID, bytes24 commitmentHash) external {\\n        require(owners[characterID] == msg.sender, \\\"NOT_OWNER\\\");\\n        Character memory character = characters[characterID];\\n        require(character.life > 0, \\\"DEAD\\\");\\n        _makeCommitment(characterID, commitmentHash);\\n    }\\n\\n    function resolve(\\n        uint256 characterID,\\n        bytes32 secret,\\n        Action[] calldata actions,\\n        uint16 combatStance,\\n        bytes24 furtherActions\\n    ) external {\\n        Commitment storage commitment = commitments[characterID];\\n        (uint32 epoch, bool commiting) = _epoch();\\n\\n        require(!commiting, \\\"IN_COMMITING_PHASE\\\");\\n        require(commitment.epoch != 0, \\\"NOTHING_TO_RESOLVE\\\");\\n        require(commitment.epoch == epoch, \\\"INVALID_epoch\\\");\\n\\n        _checkHash(commitment.hash, secret, actions, combatStance, furtherActions);\\n\\n        // we emit that first to signal, any new state is now computed for the new epoch\\n        // if we do after other events, then the event will not be first and its last occurence would not be able to indicate the end\\n        _handleEpochHash(epoch, secret);\\n\\n        Character memory character = characters[characterID];\\n        Room memory currentRoom = computeRoom(roomHash(epoch, character.position));\\n\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            Action memory action = actions[i];\\n            Room memory newRoom = computeRoom(roomHash(epoch, action.position));\\n\\n            if (_isValidMove(character.position, currentRoom, action.position, newRoom)) {\\n                character.position = action.position;\\n                currentRoom = newRoom;\\n                if (action.pickTreasure) {\\n                    if (currentRoom.treasure) {\\n                        _handleGoldBattle(epoch, characterID, character, combatStance);\\n                    }\\n                    // } else if (action.battleMonster) {\\n                    //     if (currentRoom.monster) {\\n                    //         // Monster monster = room.monster;\\n                    //         _handleMonsterBattle(epoch, characterID, character, combatStance);\\n                    //     }\\n                }\\n            } else {\\n                // For now:\\n                revert(\\\"invalid move\\\");\\n\\n                // we do not continue when we encounter an invalid move\\n                // for simplicity, we still count was was computed so far\\n                // TODO alternative: revert the whole moves but keep the commitment\\n                // break;\\n            }\\n        }\\n\\n        _handleCommitment(characterID, epoch, commitment, actions, furtherActions);\\n\\n        _handleCharacter(characterID, character);\\n    }\\n\\n    function _handleGoldBattle(uint256 epoch, uint256 characterID, Character memory character, uint16 combatStance)\\n        internal\\n    {\\n        GoldBattle memory battle = goldBattles[epoch][character.position];\\n        if (battle.combatStance == 0) {\\n            character.gold = character.gold + 1 ether;\\n            battle.currentWinner = characterID;\\n            battle.combatStance = combatStance;\\n        } else {\\n            // TODO make it commutative\\n            // or track but limit the number of character that can get the gold\\n            //  in that case, if that limit is reached, nobody is harmed, nobody get the gold\\n            int8 result = _battle(combatStance, battle.combatStance);\\n            if (result >= 0) {\\n                if (battle.currentWinner != 0) {\\n                    Character memory previous = characters[battle.currentWinner];\\n                    previous.gold = previous.gold - 1 ether;\\n                    previous.life = previous.life - 1; // because of order issue, we need to remove that\\n                    _handleCharacter(battle.currentWinner, previous);\\n                }\\n                if (result > 0) {\\n                    character.gold = character.gold + 1 ether;\\n                    battle.currentWinner = characterID;\\n                    battle.combatStance = combatStance;\\n                } else {\\n                    battle.currentWinner = 0;\\n                    battle.combatStance = combatStance; // hmm prder would matter here depending on how they can be equal\\n                }\\n            }\\n        }\\n\\n        goldBattles[epoch][character.position] = battle;\\n    }\\n\\n    function _handleMonsterBattle(\\n        uint256 epoch,\\n        uint256 characterID,\\n        Character memory character,\\n        uint16 combatStance,\\n        Monster memory monster\\n    ) internal {\\n        MonsterBattle memory battle = monsterBattles[epoch][character.position];\\n        battle.life = battle.life == 0 ? monster.life : battle.life;\\n\\n        int8 result = _battle(combatStance, monster.combatStance);\\n        if (result > 0) {\\n            if (battle.life != type(uint256).max) {\\n                // if not already dead\\n                battle.life--;\\n                if (battle.life == 0) {\\n                    battle.life = type(uint256).max; // monster is dead\\n                    emit MonsterDefeat(character.position, epoch);\\n                }\\n            }\\n        } else if (result < 0) {\\n            character.life = character.life - 1;\\n        }\\n\\n        if (battle.life == type(uint256).max) {\\n            // no need to fight, you get a share\\n            character.gold = character.gold + 2 ether;\\n            // NOTE that if we want to make it a share\\n            // we can't give gold now, but need to do it in the post-reveal phase (offchain-present, onchain-future)\\n        } else {\\n            monsterClaims[characterID] = epoch; // the position is the last one, we just need to make sure we execute the claim before anything else\\n            emit MonsterClaim(characterID, character.position, epoch);\\n        }\\n\\n        monsterBattles[epoch][character.position] = battle;\\n    }\\n\\n    function _handlePlayerBattle(uint256 epoch, uint256 characterID, Character memory character, uint16 combatStance)\\n        internal\\n    {\\n        // TODO\\n    }\\n\\n    function _battle(uint16 p1_battleStance, uint16 p2_battleStance) internal pure returns (int8 total) {\\n        uint8 p1_round = 10;\\n        uint8 p2_round = 10;\\n        for (uint256 i = 0; i < 3; i++) {\\n            p1_round = _getNextValue(p1_battleStance, p1_round - 1);\\n            p2_round = _getNextValue(p2_battleStance, p2_round - 1);\\n            if (p1_round > p2_round) {\\n                total = total + 1;\\n            } else if (p1_round < p2_round) {\\n                total = total - 1;\\n            }\\n        }\\n    }\\n\\n    function _getNextValue(uint16 combatStance, uint8 start) internal pure returns (uint8) {\\n        for (int256 i = (int8(start) - 1); i >= 0; i--) {\\n            if ((combatStance >> uint256(i)) != 0) {\\n                return uint8(uint256(i + 1));\\n            }\\n        }\\n        return 0; // invalid\\n    }\\n\\n    function _handleCommitment(\\n        uint256 characterID,\\n        uint32 epoch,\\n        Commitment storage commitment,\\n        Action[] memory actions,\\n        bytes24 furtherActions\\n    ) internal {\\n        bytes24 hashResolved = commitment.hash;\\n        if (furtherActions != bytes24(0)) {\\n            commitment.hash = furtherActions;\\n        } else {\\n            commitment.epoch = 0; // used\\n        }\\n\\n        emit CommitmentResolved(characterID, epoch, hashResolved, actions, furtherActions);\\n    }\\n\\n    function _handleEpochHash(uint32 epoch, bytes32 secret) internal {\\n        // we compute our epochHash as reveal are entered\\n        // Note that later we might want to only use commitment who has gone deep enough in the dungeon\\n        if (epoch % 2 == 0) {\\n            epochHash_1 = secret ^ epochHash_1;\\n            emit EpochHashUpdate(epoch + 1, epochHash_1);\\n        } else {\\n            epochHash_0 = secret ^ epochHash_0;\\n            emit EpochHashUpdate(epoch + 1, epochHash_0);\\n        }\\n    }\\n\\n    function _handleCharacter(uint256 characterID, Character memory character) internal {\\n        characters[characterID] = character;\\n\\n        // CommitmentResolved event contains everything needed for an indexer to recompute the state\\n        // but here for simplicity we emit the latest data just computed\\n\\n        emit CharacterUpdate(\\n            characterID,\\n            character.position,\\n            character.life,\\n            character.gold,\\n            character.equipment,\\n            character.combatStanceAvailable\\n        );\\n    }\\n\\n    function roomID(int32 x, int32 y) public pure returns (uint256) {\\n        unchecked {\\n            return uint256(uint256(uint64(uint32(y)) << 32) + uint32(x));\\n        }\\n    }\\n\\n    function roomCoords(uint256 id) public pure returns (int32 x, int32 y) {\\n        unchecked {\\n            x = int32(int256(id & 0xFFFFFFFF));\\n            y = int32(int256(id >> 32));\\n        }\\n    }\\n\\n    function roomHash(uint32 epoch, int32 x, int32 y) public view returns (bytes32) {\\n        return roomHash(epoch, roomID(x, y));\\n    }\\n\\n    function roomHash(uint32 epoch, uint256 id) public view returns (bytes32) {\\n        bytes32 epochHash = epoch % 2 == 0 ? epochHash_0 : epochHash_1;\\n        return keccak256(abi.encodePacked(epochHash, id));\\n    }\\n\\n    function computeRoom(bytes32 roomHashData) public pure returns (Room memory) {\\n        // // take from the first 0 (right side) and take 2 bits to give you a number between [0,2**2[\\n        // const firstExit = value(roomHashData, 0, 2);\\n        uint8 firstExit = uint8(Extraction.value(roomHashData, 0, 2));\\n\\n        // const hasSecondExit = value(roomHashData, 2, 5) < 3; // take 32 values [0,2**5[\\n        bool hasSecondExit = uint8(Extraction.value(roomHashData, 2, 5)) < 10;\\n        // const secondExitRaw = value(roomHashData, 7, 2); // this has one value too much.\\n        uint8 secondExitRaw = uint8(Extraction.value(roomHashData, 7, 2));\\n        // const secondExit = hasSecondExit && secondExitRaw < 3 ? secondExitRaw : 4;\\n        uint8 secondExit = (hasSecondExit && secondExitRaw < 3) ? secondExitRaw : 4;\\n        // // const thirdExist = firstExit + ((Math.floor(Math.random() * 3) + 1) % 4);\\n        // // const fourthExit = firstExit + ((Math.floor(Math.random() * 3) + 1) % 4);\\n\\n        // const treasure = value(roomHashData, 9, 10) < 7; // take 1024 values [0,2**10[\\n        bool treasure = Extraction.value(roomHashData, 9, 10) < 20;\\n\\n        // const monsterRaw = value(roomHashData, 19, 7); // take 128 values [0,2**7[\\n        uint8 monsterRaw = uint8(Extraction.value(roomHashData, 19, 7));\\n        // const monster = treasure ? monsterRaw < 30 : monsterRaw < 1;\\n        bool monster = treasure ? monsterRaw < 30 : monsterRaw < 1;\\n\\n        return Room({\\n            exits: [\\n                firstExit == 0 || secondExit == 0,\\n                firstExit == 1 || secondExit == 1,\\n                firstExit == 2 || secondExit == 2,\\n                firstExit == 3 || secondExit == 3\\n            ],\\n            treasure: treasure,\\n            monster: monster\\n        });\\n    }\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // ----------------------------------------------------------------------------------------------\\n\\n    function _makeCommitment(uint256 characterID, bytes24 commitmentHash) internal {\\n        Commitment storage commitment = commitments[characterID];\\n\\n        (uint32 epoch, bool commiting) = _epoch();\\n\\n        console.log(\\\"epoch\\\");\\n        console.logUint(epoch);\\n\\n        // TODO extract this into a separate function that can also be called by anyone (past the corresponding reveal phase)\\n        //  Would be used to claim the gold, equipment, etc...\\n        if (commitment.epoch != 0 && commitment.epoch != epoch) {\\n            characters[characterID].life = 0;\\n            commitment.epoch = 0;\\n\\n            emit CommitmentVoid(characterID, epoch);\\n\\n            // CommitmentVoid event contains everything needed for an indexer to recompute the state\\n            // but here for simplicity we emit the latest data just computed\\n            emit CharacterUpdate(\\n                characterID,\\n                characters[characterID].position,\\n                characters[characterID].life,\\n                characters[characterID].gold,\\n                characters[characterID].equipment,\\n                0\\n            );\\n        }\\n\\n        require(commiting, \\\"IN_RESOLUTION_PHASE\\\");\\n        require(commitment.epoch == 0 || commitment.epoch == epoch, \\\"PREVIOUS_COMMITMENT_TO_RESOLVE\\\");\\n\\n        commitment.hash = commitmentHash;\\n        commitment.epoch = epoch;\\n\\n        // Note: A character can change its commitment at any time until the commit phase ends.\\n        emit CommitmentMade(characterID, epoch, commitmentHash);\\n    }\\n\\n    function _checkHash(\\n        bytes24 commitmentHash,\\n        bytes32 secret,\\n        Action[] memory actions,\\n        uint16 combatStance,\\n        bytes24 furtherActions\\n    ) internal pure {\\n        if (furtherActions != bytes24(0)) {\\n            bytes24 computedHash = bytes24(keccak256(abi.encode(secret, actions, combatStance, furtherActions)));\\n            require(commitmentHash == computedHash, \\\"HASH_NOT_MATCHING\\\");\\n        } else {\\n            bytes24 computedHash = bytes24(keccak256(abi.encode(secret, actions, combatStance)));\\n            require(commitmentHash == computedHash, \\\"HASH_NOT_MATCHING\\\");\\n        }\\n    }\\n\\n    function _epoch() internal view virtual returns (uint32 epoch, bool commiting) {\\n        uint256 epochDuration = TOTAL;\\n\\n        // For now START_TIMESTAMP = 0\\n        require(_timestamp() >= START_TIMESTAMP, \\\"GAME_NOT_STARTED\\\");\\n\\n        uint256 timePassed = _timestamp() - START_TIMESTAMP;\\n        epoch = uint32((timePassed / epochDuration) + 1);\\n        commiting = timePassed - ((epoch - 1) * epochDuration) < ACTION_PERIOD;\\n    }\\n\\n    function _isValidMove(uint256 roomPosition, Room memory room, uint256 newPosition, Room memory newRoom)\\n        internal\\n        view // pure\\n        returns (bool)\\n    {\\n        (int32 x, int32 y) = roomCoords(roomPosition);\\n        (int32 nx, int32 ny) = roomCoords(newPosition);\\n        if (x == nx && y == ny) {\\n            console.log(\\\"same\\\");\\n            return true;\\n        }\\n        uint8 direction = _direction(x, y, nx, ny);\\n        if (direction == 4) {\\n            return false;\\n        }\\n        return room.exits[direction] || newRoom.exits[(direction + 2) % 4];\\n    }\\n\\n    function _direction(int32 fromx, int32 fromy, int32 tox, int32 toy) internal pure returns (uint8) {\\n        int64 x_diff = int64(tox) - fromx;\\n        int64 y_diff = int64(toy) - fromy;\\n        if (x_diff == 0) {\\n            if (y_diff == 1) {\\n                return 2;\\n            } else if (y_diff == -1) {\\n                return 0;\\n            } else {\\n                return 4; // undefined\\n            }\\n        } else {\\n            if (x_diff == 1) {\\n                return 1;\\n            } else if (x_diff == -1) {\\n                return 3;\\n            } else {\\n                return 4; // undefined\\n            }\\n        }\\n    }\\n\\n    function _timestamp() internal view virtual override returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x524955571c09d66f29eb4d831b343572689257afa4cd6d1147190e4cffcacb4e\",\"license\":\"AGPL-3.0\"},\"src/Extraction.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\nlibrary Extraction {\\n    function value(bytes32 data, uint8 leastSignificantBit, uint8 size) internal pure returns (uint256) {\\n        return uint256((data >> leastSignificantBit)) % 2 ** size;\\n    }\\n}\\n\",\"keccak256\":\"0x044d0dfe9aa167d1dfae04ea33549566ed7af07b582260eeaa830a5361befe2f\",\"license\":\"AGPL-3.0\"},\"src/TimeControlledDungeon.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Dungeon.sol\\\";\\nimport \\\"./Characters.sol\\\";\\nimport \\\"./UsingControlledTime.sol\\\";\\n\\ncontract TimeControlledDungeon is Dungeon, UsingControlledTime {\\n    constructor(Characters characters) Dungeon(characters) {}\\n\\n    // TODO could we move that into UsingControlledTime\\n    function _timestamp() internal view virtual override(Dungeon, UsingInternalTimestamp) returns (uint256) {\\n        return block.timestamp + _delta();\\n    }\\n}\\n\",\"keccak256\":\"0x28bd436a139da84112538a0a4e73ebce4b522c3df7b51897b0cb487c1779cf89\",\"license\":\"AGPL-3.0\"},\"src/UsingControlledTime.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./UsingInternalTimestamp.sol\\\";\\n\\nabstract contract UsingControlledTime is UsingInternalTimestamp {\\n    event TimeIncreased(uint256 newTime, uint256 delta);\\n\\n    function timestamp() external view returns (uint256) {\\n        return _timestamp();\\n    }\\n\\n    function increaseTime(uint256 delta) external {\\n        address adminAddress;\\n        assembly {\\n            adminAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n        require(msg.sender == adminAddress, \\\"NOT_ADMIN\\\");\\n        uint256 newDelta = _delta() + delta;\\n        assembly {\\n            sstore(0x112c413de07a110ce0a9ace0c01e41b5b59462770325b042f0dc72c337f55f2, newDelta)\\n        }\\n        emit TimeIncreased(_timestamp(), delta);\\n    }\\n\\n    function _delta() internal view returns (uint256 delta) {\\n        assembly {\\n            // keccak256(\\\"time\\\") - 1\\n            delta := sload(0x112c413de07a110ce0a9ace0c01e41b5b59462770325b042f0dc72c337f55f2)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43a920a8091bcec5ee3726daee616dd17a14f16513bb0c41a3de11a8d92e34ec\",\"license\":\"AGPL-3.0\"},\"src/UsingInternalTimestamp.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\nabstract contract UsingInternalTimestamp {\\n    function _timestamp() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x0c302cda0ec9b60fd47776461270fb285a92f8f4c11af1ead8ea7b87338488fc\",\"license\":\"AGPL-3.0\"},\"src/Vessels.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"solidity-kit/solc_0.8/ERC721/implementations/BasicERC721.sol\\\";\\n\\nabstract contract Vessels is BasicERC721 {\\n    // ----------------------------------------------------------------------------------------------\\n    // EVENTS\\n    // ----------------------------------------------------------------------------------------------\\n    event VesselSlotUpdate(uint256 indexed id, address indexed namespace, uint256 indexed slot, bytes32 slotData);\\n    event VesselDataUpdate(uint256 indexed id, address indexed namespace, bytes data);\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // STORAGE\\n    // ----------------------------------------------------------------------------------------------\\n    mapping(uint256 => mapping(address => mapping(uint256 => bytes32))) _slots;\\n    mapping(uint256 => mapping(address => bytes)) _data;\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // PUBLIC INTERFACE\\n    // ----------------------------------------------------------------------------------------------\\n\\n    /// @notice return the character's slot data for the caller's namespace\\n    function getSlot(uint256 id, uint256 index) external view returns (bytes32) {\\n        return _slots[id][msg.sender][index];\\n    }\\n\\n    /// @notice return the character's slot data for the provided namespace\\n    function getSlotFor(uint256 id, address namespace, uint256 index) external view returns (bytes32) {\\n        return _slots[id][namespace][index];\\n    }\\n\\n    /// @notice set the character's slot data on the caller's namespace\\n    function setSlot(uint256 id, uint256 index, bytes32 slotData) external {\\n        _setSlotFor(id, msg.sender, index, slotData);\\n    }\\n\\n    // /// @notice set the character's slot data on the provided namespace\\n    // function setSlot(uint256 id, address namespace, uint256 index, bytes32 slotData) external {\\n    //     revert(\\\"NOT_IMPLEMENTED\\\");\\n    //     // TODO allow delegation for other contract to setData on some other contract\\n    //     // require(msg.sender == );\\n    //     // _setSlotFor(id, msg.sender, index, slotData);\\n    // }\\n\\n    /// @notice return the character's data for the caller's namespace\\n    function getData(uint256 id) external view returns (bytes memory) {\\n        return _data[id][msg.sender];\\n    }\\n\\n    /// @notice return the character's data for the provided namespace\\n    function getDataFor(uint256 id, address namespace) external view returns (bytes memory) {\\n        return _data[id][namespace];\\n    }\\n\\n    /// @notice set the character's data on the caller's namespace\\n    function setData(uint256 id, bytes calldata data) external {\\n        _setDataFor(id, msg.sender, data);\\n    }\\n\\n    // /// @notice set the character's data on the provided namespace\\n    // function setData(uint256 id, address namespace, bytes calldata data) external {\\n    //     revert(\\\"NOT_IMPLEMENTED\\\");\\n    //     // TODO allow delegation for other contract to setData on some other contract\\n    //     // require(msg.sender == );\\n    //     // _setDataFor(id, msg.sender, index, slotData);\\n    // }\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // ----------------------------------------------------------------------------------------------\\n    function _setSlotFor(uint256 id, address namespace, uint256 index, bytes32 slotData) internal {\\n        _slots[id][namespace][index] = slotData;\\n        emit VesselSlotUpdate(id, namespace, index, slotData);\\n    }\\n\\n    function _setDataFor(uint256 id, address namespace, bytes memory data) internal {\\n        _data[id][namespace] = data;\\n        emit VesselDataUpdate(id, namespace, data);\\n    }\\n}\\n\",\"keccak256\":\"0x1b01826f1e0382e74258f373b6a07afaa077bae5b193b87e6d10883f8dd5d2ac\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801562000010575f80fd5b5060405162002780380380620027808339810160408190526200003391620002f1565b6001600160a01b038116608052806200004c8162000054565b505062000416565b5f6200006c5f80516020620027408339815191525490565b90506001600160a01b0381166200009b576001600160a01b035f805160206200274083398151915255620000b0565b336001600160a01b03821614620000b0575f80fd5b6080516001600160a01b0316826001600160a01b031614620001195760405162461bcd60e51b815260206004820152601c60248201527f636861726163746572546f6b656e7320697320696d6d757461626c650000000060448201526064015b60405180910390fd5b5f806200012562000154565b915091506200014e816200013a578262000147565b6200014760018462000334565b5f62000216565b50505050565b5f80620151808162000165620002b6565b1015620001a85760405162461bcd60e51b815260206004820152601060248201526f11d0535157d393d517d4d5105495115160821b604482015260640162000110565b5f80620001b4620002b6565b620001c091906200035b565b9050620001ce82826200038b565b620001db906001620003a1565b93506201437082620001ef60018762000334565b63ffffffff16620002019190620003b7565b6200020d90836200035b565b10925050509091565b62000223600283620003d1565b63ffffffff165f036200027957600780548218905562000245826001620003f6565b63ffffffff165f80516020620027608339815191526007546040516200026d91815260200190565b60405180910390a25050565b60068054821890556200028e826001620003f6565b63ffffffff165f80516020620027608339815191526006546040516200026d91815260200190565b5f620002e07f0112c413de07a110ce0a9ace0c01e41b5b59462770325b042f0dc72c337f55f25490565b620002ec9042620003a1565b905090565b5f6020828403121562000302575f80fd5b81516001600160a01b038116811462000319575f80fd5b9392505050565b634e487b7160e01b5f52601160045260245ffd5b63ffffffff82811682821603908082111562000354576200035462000320565b5092915050565b8181038181111562000371576200037162000320565b92915050565b634e487b7160e01b5f52601260045260245ffd5b5f826200039c576200039c62000377565b500490565b8082018082111562000371576200037162000320565b808202811582820484141762000371576200037162000320565b5f63ffffffff80841680620003ea57620003ea62000377565b92169190910692915050565b63ffffffff81811683821601908082111562000354576200035462000320565b60805161230a620004365f395f8181610c360152610e01015261230a5ff3fe608060405260043610610109575f3560e01c80634b7efbfc116100a1578063b80777ea11610071578063c79b243011610057578063c79b243014610447578063d0ff234214610466578063e97dcb6214610485575f80fd5b8063b80777ea14610407578063be4b0d101461041b575f80fd5b80634b7efbfc14610330578063558f546b1461038657806368a611f4146103b1578063a67f678f146103d0575f80fd5b80633c9a2a1a116100dc5780633c9a2a1a1461020857806340b968df146102275780634810bc591461024657806349ce8997146102cb575f80fd5b8063025e7c271461010d5780630e74dc9f1461015e5780631d5b108d146101a357806329a06c26146101c4575b5f80fd5b348015610118575f80fd5b50610141610127366004611bae565b60046020525f90815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b348015610169575f80fd5b50610189610178366004611bae565b63ffffffff81169160209190911c90565b60408051600393840b81529190920b602082015201610155565b3480156101ae575f80fd5b506101c26101bd366004611bf3565b61048d565b005b3480156101cf575f80fd5b506101fa6101de366004611c94565b600160209081525f928352604080842090915290825290205481565b604051908152602001610155565b348015610213575f80fd5b506101c2610222366004611bae565b6107ed565b348015610232575f80fd5b506101c2610241366004611cb4565b610905565b348015610251575f80fd5b50610297610260366004611bae565b600360208190525f9182526040909120805460018201546002830154938301546004909301549193909260ff9091169161ffff1685565b60408051958652602086019490945260ff90921692840192909252606083019190915261ffff16608082015260a001610155565b3480156102d6575f80fd5b5061030a6102e5366004611bae565b60056020525f908152604090819020549081901b90600160c01b900463ffffffff1682565b6040805167ffffffffffffffff19909316835263ffffffff909116602083015201610155565b34801561033b575f80fd5b5061036e61034a366004611c94565b5f6020818152928152604080822090935290815220805460019091015461ffff1682565b6040805192835261ffff909116602083015201610155565b348015610391575f80fd5b506101fa6103a0366004611bae565b60026020525f908152604090205481565b3480156103bc575f80fd5b506101fa6103cb366004611cf1565b610a17565b3480156103db575f80fd5b506101fa6103ea366004611d2a565b67ffffffff00000000602082901b1663ffffffff83160192915050565b348015610412575f80fd5b506101fa610a72565b348015610426575f80fd5b5061043a610435366004611bae565b610a80565b6040516101559190611d52565b348015610452575f80fd5b506101c2610461366004611d9d565b610bb8565b348015610471575f80fd5b506101fa610480366004611dca565b610ce8565b6101c2610d11565b5f86815260056020526040812090806104a4610f01565b9150915080156104fb5760405162461bcd60e51b815260206004820152601260248201527f494e5f434f4d4d4954494e475f5048415345000000000000000000000000000060448201526064015b60405180910390fd5b8254600160c01b900463ffffffff165f036105585760405162461bcd60e51b815260206004820152601260248201527f4e4f5448494e475f544f5f5245534f4c5645000000000000000000000000000060448201526064016104f2565b825463ffffffff838116600160c01b90920416146105b85760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f65706f63680000000000000000000000000000000000000060448201526064016104f2565b8254604080516020808a0282018101835289825261061a9390921b918b91908b908b9081905f9085015b8282101561060e576105ff60408302860136819003810190611e0a565b815260200190600101906105e2565b50505050508888610fbe565b6106248289611106565b5f898152600360208181526040808420815160a0810183528154808252600183015494820194909452600282015460ff169281019290925292830154606082015260049092015461ffff16608083015290919061068690610435908690610a17565b90505f5b88811015610777575f8a8a838181106106a5576106a5611e6e565b9050604002018036038101906106bb9190611e0a565b90505f6106ce61043588845f0151610a17565b855183519192506106e1918690846111c1565b1561071a5781518552602082015190935083901561071557836020015115610715576107158763ffffffff168f878d6112ca565b610762565b60405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206d6f7665000000000000000000000000000000000000000060448201526064016104f2565b5050808061076f90611e96565b91505061068a565b506107d68b85878c8c808060200260200160405190810160405280939291908181526020015f905b828210156107cb576107bc60408302860136819003810190611e0a565b8152602001906001019061079f565b50505050508a61146d565b6107e08b83611530565b5050505050505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354336001600160a01b038216146108675760405162461bcd60e51b815260206004820152600960248201527f4e4f545f41444d494e000000000000000000000000000000000000000000000060448201526064016104f2565b5f826108917f0112c413de07a110ce0a9ace0c01e41b5b59462770325b042f0dc72c337f55f25490565b61089b9190611eae565b9050807f0112c413de07a110ce0a9ace0c01e41b5b59462770325b042f0dc72c337f55f2557f36e7cd7cbe0c64c4f819149d7127212cc2ebb56e948ae958ef18f6d1535871c96108e96115dc565b60408051918252602082018690520160405180910390a1505050565b5f828152600460205260409020546001600160a01b0316331461096a5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016104f2565b5f82815260036020818152604092839020835160a08101855281548152600182015492810192909252600281015460ff1693820184905291820154606082015260049091015461ffff16608082015290610a085760405162461bcd60e51b81526004016104f29060208082526004908201527f4445414400000000000000000000000000000000000000000000000000000000604082015260600190565b610a12838361160f565b505050565b5f80610a24600285611ed5565b63ffffffff1615610a3757600754610a3b565b6006545b6040805160208101839052908101859052909150606001604051602081830303815290604052805190602001209150505b92915050565b5f610a7b6115dc565b905090565b610a88611b6a565b5f610a95835f60026118d5565b90505f600a610aa785600260056118d5565b60ff161090505f610abb85600760026118d5565b90505f828015610ace575060038260ff16105b610ad9576004610adb565b815b90505f6014610aed886009600a6118d5565b1090505f610afe88601360076118d5565b90505f82610b125760018260ff1610610b1a565b601e8260ff16105b6040805160e0810190915290915080606081018060ff8b161580610b3f575060ff8816155b15158152602001600160ff8c161480610b5b57508760ff166001145b15158152602001600260ff8c161480610b7757508760ff166002145b15158152602001600360ff8c161480610b9357508760ff166003145b1515905281529315156020850152901515604090930192909252509695505050505050565b5f610be17fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116610c20576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610c34565b336001600160a01b03821614610c34575f80fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614610cb55760405162461bcd60e51b815260206004820152601c60248201527f636861726163746572546f6b656e7320697320696d6d757461626c650000000060448201526064016104f2565b5f80610cbf610f01565b91509150610ce281610cd15782610cdc565b610cdc600184611ef7565b5f611106565b50505050565b5f610d098463ffffffff8516602085901b67ffffffff000000001601610a17565b949350505050565b3466038d7ea4c6800014610d675760405162461bcd60e51b815260206004820152601060248201527f47495645204d4520544845204b5745490000000000000000000000000000000060448201526064016104f2565b335f818152600460205260409020546001600160a01b031615610dcc5760405162461bcd60e51b815260206004820152600a60248201527f414c52454144595f494e0000000000000000000000000000000000000000000060448201526064016104f2565b6040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018290523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906394bf804d906044015f604051808303815f87803b158015610e4a575f80fd5b505af1158015610e5c573d5f803e3d5ffd5b5050505f8281526004602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155905184935090917f88f44981dd7340873ce645fff36fd047197026d64ffa5145d62684dac489859391a3610efe816040518060a001604052805f81526020015f8152602001600360ff1681526020015f801b81526020016101ff61ffff16815250611530565b50565b5f806201518081610f106115dc565b1015610f5e5760405162461bcd60e51b815260206004820152601060248201527f47414d455f4e4f545f535441525445440000000000000000000000000000000060448201526064016104f2565b5f80610f686115dc565b610f729190611f1b565b9050610f7e8282611f2e565b610f89906001611eae565b93506201437082610f9b600187611ef7565b63ffffffff16610fab9190611f41565b610fb59083611f1b565b10925050509091565b67ffffffffffffffff1981161561106a575f84848484604051602001610fe79493929190611f9e565b6040516020818303038152906040528051906020012090508067ffffffffffffffff19168667ffffffffffffffff1916146110645760405162461bcd60e51b815260206004820152601160248201527f484153485f4e4f545f4d41544348494e4700000000000000000000000000000060448201526064016104f2565b506110ff565b5f84848460405160200161108093929190611fdc565b6040516020818303038152906040528051906020012090508067ffffffffffffffff19168667ffffffffffffffff1916146110fd5760405162461bcd60e51b815260206004820152601160248201527f484153485f4e4f545f4d41544348494e4700000000000000000000000000000060448201526064016104f2565b505b5050505050565b611111600283611ed5565b63ffffffff165f03611175576007805482189055611130826001612008565b63ffffffff167fec99e9b645e0d752776aecb3a31c64ae23b491afeae29a072a0eaa66aa9a386260075460405161116991815260200190565b60405180910390a25050565b6006805482189055611188826001612008565b63ffffffff167fec99e9b645e0d752776aecb3a31c64ae23b491afeae29a072a0eaa66aa9a386260065460405161116991815260200190565b5f63ffffffff85811690602087811c9186169086901c600384810b9083900b1480156111f257508060030b8360030b145b15611242576112356040518060400160405280600481526020017f73616d65000000000000000000000000000000000000000000000000000000008152506118f1565b6001945050505050610d09565b5f61124f85858585611962565b90508060ff16600403611269575f95505050505050610d09565b885160ff82166004811061127f5761127f611e6e565b6020020151806112bc575086516004611299836002612025565b6112a3919061203e565b60ff16600481106112b6576112b6611e6e565b60200201515b9a9950505050505050505050565b5f848152602081815260408083208551845282528083208151808301909252805482526001015461ffff16918101829052910361133257602083015161131890670de0b6b3a7640000611eae565b60208085019190915284825261ffff83169082015261142e565b5f6113418383602001516119f9565b90505f815f0b1261142c578151156113e35781515f90815260036020818152604092839020835160a081018552815481526001820154928101839052600282015460ff169481019490945291820154606084015260049091015461ffff1660808301526113b790670de0b6b3a764000090611f1b565b602082015260408101516113cd9060019061205f565b60ff16604082015282516113e19082611530565b505b5f815f0b131561141e57602084015161140490670de0b6b3a7640000611eae565b60208086019190915285835261ffff84169083015261142c565b5f825261ffff831660208301525b505b5f9485526020858152604080872094518752938152929094208451815593909101516001909301805461ffff191661ffff909416939093179092555050565b825460401b67ffffffffffffffff198216156114b45783547fffffffffffffffff00000000000000000000000000000000000000000000000016604083901c1784556114db565b83547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1684555b8067ffffffffffffffff19168563ffffffff16877fe9c231e32489c1cd453cdf7bb6f012ba9367c3bd0274d7d3477a3229117fe5588686604051611520929190612078565b60405180910390a4505050505050565b5f82815260036020818152604092839020845180825585830151600183018190558686015160028401805460ff191660ff90921691821790556060808901519685018790556080808a01516004909601805461ffff191661ffff90971696871790558851928352958201929092529586019490945292840152909184917fbe3976e28d32740b80f18f5801a0f37dfe790989037762b6fab681180c759eba910160405180910390a35050565b5f6116057f0112c413de07a110ce0a9ace0c01e41b5b59462770325b042f0dc72c337f55f25490565b610a7b9042611eae565b5f8281526005602052604081209080611626610f01565b915091506116686040518060400160405280600581526020017f65706f63680000000000000000000000000000000000000000000000000000008152506118f1565b6116778263ffffffff16611a86565b8254600160c01b900463ffffffff16158015906116a55750825463ffffffff838116600160c01b9092041614155b15611788575f85815260036020526040808220600201805460ff1916905584547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1685555163ffffffff84169187917f55bcfb749765e4f29e47e536e89cd7ecd421104fe2f6b756e96fd255aa623a339190a35f8581526003602081815260408084208054600282015460018301549290950154835160ff90961686529385019190915290830191909152606082019290925286907fbe3976e28d32740b80f18f5801a0f37dfe790989037762b6fab681180c759eba9060800160405180910390a35b806117d55760405162461bcd60e51b815260206004820152601360248201527f494e5f5245534f4c5554494f4e5f50484153450000000000000000000000000060448201526064016104f2565b8254600160c01b900463ffffffff1615806118005750825463ffffffff838116600160c01b90920416145b61184c5760405162461bcd60e51b815260206004820152601e60248201527f50524556494f55535f434f4d4d49544d454e545f544f5f5245534f4c5645000060448201526064016104f2565b825463ffffffff8316600160c01b81027fffffffff00000000000000000000000000000000000000000000000000000000909216604087811c91909117929092178555905167ffffffffffffffff198616815286907f7c43998fb35751dbddf74d7899a2e8f8f102de5a6c9322174bf38ff581d54f199060200160405180910390a35050505050565b5f6118e1826002612184565b610d099060ff851686901c612192565b610efe8160405160240161190591906121a5565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052611af5565b5f808560030b8460030b61197691906121f0565b90505f8560030b8460030b61198b91906121f0565b90508160070b5f036119cd578060070b6001036119ad57600292505050610d09565b8060070b5f19036119c2575f92505050610d09565b600492505050610d09565b8160070b6001036119e357600192505050610d09565b8160070b5f19036119c257600392505050610d09565b5f600a80825b6003811015611a7d57611a1c86611a1760018661205f565b611b15565b9250611a2d85611a1760018561205f565b91508160ff168360ff161115611a4f57611a48846001612236565b9350611a6b565b8160ff168360ff161015611a6b57611a68600185612256565b93505b80611a7581611e96565b9150506119ff565b50505092915050565b610efe81604051602401611a9c91815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff5b1bba9000000000000000000000000000000000000000000000000000000001790525b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b5f80611b22600184612256565b5f0b90505b5f8112611b615761ffff808516821c1615611b4f57611b47816001612276565b915050610a6c565b80611b598161229d565b915050611b27565b505f9392505050565b6040518060600160405280611b7d611b90565b81525f6020820181905260409091015290565b60405180608001604052806004906020820280368337509192915050565b5f60208284031215611bbe575f80fd5b5035919050565b803561ffff81168114611bd6575f80fd5b919050565b803567ffffffffffffffff1981168114611bd6575f80fd5b5f805f805f8060a08789031215611c08575f80fd5b8635955060208701359450604087013567ffffffffffffffff80821115611c2d575f80fd5b818901915089601f830112611c40575f80fd5b813581811115611c4e575f80fd5b8a60208260061b8501011115611c62575f80fd5b602083019650809550505050611c7a60608801611bc5565b9150611c8860808801611bdb565b90509295509295509295565b5f8060408385031215611ca5575f80fd5b50508035926020909101359150565b5f8060408385031215611cc5575f80fd5b82359150611cd560208401611bdb565b90509250929050565b803563ffffffff81168114611bd6575f80fd5b5f8060408385031215611d02575f80fd5b611d0b83611cde565b946020939093013593505050565b8035600381900b8114611bd6575f80fd5b5f8060408385031215611d3b575f80fd5b611d4483611d19565b9150611cd560208401611d19565b815160c0820190825f5b6004811015611d7d5782511515825260209283019290910190600101611d5c565b505050602083015115156080830152604090920151151560a09091015290565b5f60208284031215611dad575f80fd5b81356001600160a01b0381168114611dc3575f80fd5b9392505050565b5f805f60608486031215611ddc575f80fd5b611de584611cde565b9250611df360208501611d19565b9150611e0160408501611d19565b90509250925092565b5f60408284031215611e1a575f80fd5b6040516040810181811067ffffffffffffffff82111715611e4957634e487b7160e01b5f52604160045260245ffd5b6040528235815260208301358015158114611e62575f80fd5b60208201529392505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f5f198203611ea757611ea7611e82565b5060010190565b80820180821115610a6c57610a6c611e82565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff80841680611eeb57611eeb611ec1565b92169190910692915050565b63ffffffff828116828216039080821115611f1457611f14611e82565b5092915050565b81810381811115610a6c57610a6c611e82565b5f82611f3c57611f3c611ec1565b500490565b8082028115828204841417610a6c57610a6c611e82565b5f8151808452602080850194508084015f5b83811015611f935781518051885283015115158388015260409096019590820190600101611f6a565b509495945050505050565b848152608060208201525f611fb66080830186611f58565b905061ffff8416604083015267ffffffffffffffff198316606083015295945050505050565b838152606060208201525f611ff46060830185611f58565b905061ffff83166040830152949350505050565b63ffffffff818116838216019080821115611f1457611f14611e82565b60ff8181168382160190811115610a6c57610a6c611e82565b5f60ff83168061205057612050611ec1565b8060ff84160691505092915050565b60ff8281168282160390811115610a6c57610a6c611e82565b604081525f61208a6040830185611f58565b905067ffffffffffffffff19831660208301529392505050565b600181815b808511156120de57815f19048211156120c4576120c4611e82565b808516156120d157918102915b93841c93908002906120a9565b509250929050565b5f826120f457506001610a6c565b8161210057505f610a6c565b816001811461211657600281146121205761213c565b6001915050610a6c565b60ff84111561213157612131611e82565b50506001821b610a6c565b5060208310610133831016604e8410600b841016171561215f575081810a610a6c565b61216983836120a4565b805f190482111561217c5761217c611e82565b029392505050565b5f611dc360ff8416836120e6565b5f826121a0576121a0611ec1565b500690565b5f6020808352835180828501525f5b818110156121d0578581018301518582016040015282016121b4565b505f604082860101526040601f19601f8301168501019250505092915050565b600782810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000008112677fffffffffffffff82131715610a6c57610a6c611e82565b5f81810b9083900b01607f8113607f1982121715610a6c57610a6c611e82565b5f82810b9082900b03607f198112607f82131715610a6c57610a6c611e82565b8082018281125f83128015821682158216171561229557612295611e82565b505092915050565b5f7f800000000000000000000000000000000000000000000000000000000000000082036122cd576122cd611e82565b505f19019056fea2646970667358221220d7bbefc6279a657f8e608a154af90397641f6155495f9eaaa39d646c41fd95af64736f6c63430008140033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103ec99e9b645e0d752776aecb3a31c64ae23b491afeae29a072a0eaa66aa9a3862",
  "deployedBytecode": "0x608060405260043610610109575f3560e01c80634b7efbfc116100a1578063b80777ea11610071578063c79b243011610057578063c79b243014610447578063d0ff234214610466578063e97dcb6214610485575f80fd5b8063b80777ea14610407578063be4b0d101461041b575f80fd5b80634b7efbfc14610330578063558f546b1461038657806368a611f4146103b1578063a67f678f146103d0575f80fd5b80633c9a2a1a116100dc5780633c9a2a1a1461020857806340b968df146102275780634810bc591461024657806349ce8997146102cb575f80fd5b8063025e7c271461010d5780630e74dc9f1461015e5780631d5b108d146101a357806329a06c26146101c4575b5f80fd5b348015610118575f80fd5b50610141610127366004611bae565b60046020525f90815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b348015610169575f80fd5b50610189610178366004611bae565b63ffffffff81169160209190911c90565b60408051600393840b81529190920b602082015201610155565b3480156101ae575f80fd5b506101c26101bd366004611bf3565b61048d565b005b3480156101cf575f80fd5b506101fa6101de366004611c94565b600160209081525f928352604080842090915290825290205481565b604051908152602001610155565b348015610213575f80fd5b506101c2610222366004611bae565b6107ed565b348015610232575f80fd5b506101c2610241366004611cb4565b610905565b348015610251575f80fd5b50610297610260366004611bae565b600360208190525f9182526040909120805460018201546002830154938301546004909301549193909260ff9091169161ffff1685565b60408051958652602086019490945260ff90921692840192909252606083019190915261ffff16608082015260a001610155565b3480156102d6575f80fd5b5061030a6102e5366004611bae565b60056020525f908152604090819020549081901b90600160c01b900463ffffffff1682565b6040805167ffffffffffffffff19909316835263ffffffff909116602083015201610155565b34801561033b575f80fd5b5061036e61034a366004611c94565b5f6020818152928152604080822090935290815220805460019091015461ffff1682565b6040805192835261ffff909116602083015201610155565b348015610391575f80fd5b506101fa6103a0366004611bae565b60026020525f908152604090205481565b3480156103bc575f80fd5b506101fa6103cb366004611cf1565b610a17565b3480156103db575f80fd5b506101fa6103ea366004611d2a565b67ffffffff00000000602082901b1663ffffffff83160192915050565b348015610412575f80fd5b506101fa610a72565b348015610426575f80fd5b5061043a610435366004611bae565b610a80565b6040516101559190611d52565b348015610452575f80fd5b506101c2610461366004611d9d565b610bb8565b348015610471575f80fd5b506101fa610480366004611dca565b610ce8565b6101c2610d11565b5f86815260056020526040812090806104a4610f01565b9150915080156104fb5760405162461bcd60e51b815260206004820152601260248201527f494e5f434f4d4d4954494e475f5048415345000000000000000000000000000060448201526064015b60405180910390fd5b8254600160c01b900463ffffffff165f036105585760405162461bcd60e51b815260206004820152601260248201527f4e4f5448494e475f544f5f5245534f4c5645000000000000000000000000000060448201526064016104f2565b825463ffffffff838116600160c01b90920416146105b85760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f65706f63680000000000000000000000000000000000000060448201526064016104f2565b8254604080516020808a0282018101835289825261061a9390921b918b91908b908b9081905f9085015b8282101561060e576105ff60408302860136819003810190611e0a565b815260200190600101906105e2565b50505050508888610fbe565b6106248289611106565b5f898152600360208181526040808420815160a0810183528154808252600183015494820194909452600282015460ff169281019290925292830154606082015260049092015461ffff16608083015290919061068690610435908690610a17565b90505f5b88811015610777575f8a8a838181106106a5576106a5611e6e565b9050604002018036038101906106bb9190611e0a565b90505f6106ce61043588845f0151610a17565b855183519192506106e1918690846111c1565b1561071a5781518552602082015190935083901561071557836020015115610715576107158763ffffffff168f878d6112ca565b610762565b60405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206d6f7665000000000000000000000000000000000000000060448201526064016104f2565b5050808061076f90611e96565b91505061068a565b506107d68b85878c8c808060200260200160405190810160405280939291908181526020015f905b828210156107cb576107bc60408302860136819003810190611e0a565b8152602001906001019061079f565b50505050508a61146d565b6107e08b83611530565b5050505050505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354336001600160a01b038216146108675760405162461bcd60e51b815260206004820152600960248201527f4e4f545f41444d494e000000000000000000000000000000000000000000000060448201526064016104f2565b5f826108917f0112c413de07a110ce0a9ace0c01e41b5b59462770325b042f0dc72c337f55f25490565b61089b9190611eae565b9050807f0112c413de07a110ce0a9ace0c01e41b5b59462770325b042f0dc72c337f55f2557f36e7cd7cbe0c64c4f819149d7127212cc2ebb56e948ae958ef18f6d1535871c96108e96115dc565b60408051918252602082018690520160405180910390a1505050565b5f828152600460205260409020546001600160a01b0316331461096a5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016104f2565b5f82815260036020818152604092839020835160a08101855281548152600182015492810192909252600281015460ff1693820184905291820154606082015260049091015461ffff16608082015290610a085760405162461bcd60e51b81526004016104f29060208082526004908201527f4445414400000000000000000000000000000000000000000000000000000000604082015260600190565b610a12838361160f565b505050565b5f80610a24600285611ed5565b63ffffffff1615610a3757600754610a3b565b6006545b6040805160208101839052908101859052909150606001604051602081830303815290604052805190602001209150505b92915050565b5f610a7b6115dc565b905090565b610a88611b6a565b5f610a95835f60026118d5565b90505f600a610aa785600260056118d5565b60ff161090505f610abb85600760026118d5565b90505f828015610ace575060038260ff16105b610ad9576004610adb565b815b90505f6014610aed886009600a6118d5565b1090505f610afe88601360076118d5565b90505f82610b125760018260ff1610610b1a565b601e8260ff16105b6040805160e0810190915290915080606081018060ff8b161580610b3f575060ff8816155b15158152602001600160ff8c161480610b5b57508760ff166001145b15158152602001600260ff8c161480610b7757508760ff166002145b15158152602001600360ff8c161480610b9357508760ff166003145b1515905281529315156020850152901515604090930192909252509695505050505050565b5f610be17fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116610c20576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610c34565b336001600160a01b03821614610c34575f80fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614610cb55760405162461bcd60e51b815260206004820152601c60248201527f636861726163746572546f6b656e7320697320696d6d757461626c650000000060448201526064016104f2565b5f80610cbf610f01565b91509150610ce281610cd15782610cdc565b610cdc600184611ef7565b5f611106565b50505050565b5f610d098463ffffffff8516602085901b67ffffffff000000001601610a17565b949350505050565b3466038d7ea4c6800014610d675760405162461bcd60e51b815260206004820152601060248201527f47495645204d4520544845204b5745490000000000000000000000000000000060448201526064016104f2565b335f818152600460205260409020546001600160a01b031615610dcc5760405162461bcd60e51b815260206004820152600a60248201527f414c52454144595f494e0000000000000000000000000000000000000000000060448201526064016104f2565b6040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018290523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906394bf804d906044015f604051808303815f87803b158015610e4a575f80fd5b505af1158015610e5c573d5f803e3d5ffd5b5050505f8281526004602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155905184935090917f88f44981dd7340873ce645fff36fd047197026d64ffa5145d62684dac489859391a3610efe816040518060a001604052805f81526020015f8152602001600360ff1681526020015f801b81526020016101ff61ffff16815250611530565b50565b5f806201518081610f106115dc565b1015610f5e5760405162461bcd60e51b815260206004820152601060248201527f47414d455f4e4f545f535441525445440000000000000000000000000000000060448201526064016104f2565b5f80610f686115dc565b610f729190611f1b565b9050610f7e8282611f2e565b610f89906001611eae565b93506201437082610f9b600187611ef7565b63ffffffff16610fab9190611f41565b610fb59083611f1b565b10925050509091565b67ffffffffffffffff1981161561106a575f84848484604051602001610fe79493929190611f9e565b6040516020818303038152906040528051906020012090508067ffffffffffffffff19168667ffffffffffffffff1916146110645760405162461bcd60e51b815260206004820152601160248201527f484153485f4e4f545f4d41544348494e4700000000000000000000000000000060448201526064016104f2565b506110ff565b5f84848460405160200161108093929190611fdc565b6040516020818303038152906040528051906020012090508067ffffffffffffffff19168667ffffffffffffffff1916146110fd5760405162461bcd60e51b815260206004820152601160248201527f484153485f4e4f545f4d41544348494e4700000000000000000000000000000060448201526064016104f2565b505b5050505050565b611111600283611ed5565b63ffffffff165f03611175576007805482189055611130826001612008565b63ffffffff167fec99e9b645e0d752776aecb3a31c64ae23b491afeae29a072a0eaa66aa9a386260075460405161116991815260200190565b60405180910390a25050565b6006805482189055611188826001612008565b63ffffffff167fec99e9b645e0d752776aecb3a31c64ae23b491afeae29a072a0eaa66aa9a386260065460405161116991815260200190565b5f63ffffffff85811690602087811c9186169086901c600384810b9083900b1480156111f257508060030b8360030b145b15611242576112356040518060400160405280600481526020017f73616d65000000000000000000000000000000000000000000000000000000008152506118f1565b6001945050505050610d09565b5f61124f85858585611962565b90508060ff16600403611269575f95505050505050610d09565b885160ff82166004811061127f5761127f611e6e565b6020020151806112bc575086516004611299836002612025565b6112a3919061203e565b60ff16600481106112b6576112b6611e6e565b60200201515b9a9950505050505050505050565b5f848152602081815260408083208551845282528083208151808301909252805482526001015461ffff16918101829052910361133257602083015161131890670de0b6b3a7640000611eae565b60208085019190915284825261ffff83169082015261142e565b5f6113418383602001516119f9565b90505f815f0b1261142c578151156113e35781515f90815260036020818152604092839020835160a081018552815481526001820154928101839052600282015460ff169481019490945291820154606084015260049091015461ffff1660808301526113b790670de0b6b3a764000090611f1b565b602082015260408101516113cd9060019061205f565b60ff16604082015282516113e19082611530565b505b5f815f0b131561141e57602084015161140490670de0b6b3a7640000611eae565b60208086019190915285835261ffff84169083015261142c565b5f825261ffff831660208301525b505b5f9485526020858152604080872094518752938152929094208451815593909101516001909301805461ffff191661ffff909416939093179092555050565b825460401b67ffffffffffffffff198216156114b45783547fffffffffffffffff00000000000000000000000000000000000000000000000016604083901c1784556114db565b83547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1684555b8067ffffffffffffffff19168563ffffffff16877fe9c231e32489c1cd453cdf7bb6f012ba9367c3bd0274d7d3477a3229117fe5588686604051611520929190612078565b60405180910390a4505050505050565b5f82815260036020818152604092839020845180825585830151600183018190558686015160028401805460ff191660ff90921691821790556060808901519685018790556080808a01516004909601805461ffff191661ffff90971696871790558851928352958201929092529586019490945292840152909184917fbe3976e28d32740b80f18f5801a0f37dfe790989037762b6fab681180c759eba910160405180910390a35050565b5f6116057f0112c413de07a110ce0a9ace0c01e41b5b59462770325b042f0dc72c337f55f25490565b610a7b9042611eae565b5f8281526005602052604081209080611626610f01565b915091506116686040518060400160405280600581526020017f65706f63680000000000000000000000000000000000000000000000000000008152506118f1565b6116778263ffffffff16611a86565b8254600160c01b900463ffffffff16158015906116a55750825463ffffffff838116600160c01b9092041614155b15611788575f85815260036020526040808220600201805460ff1916905584547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1685555163ffffffff84169187917f55bcfb749765e4f29e47e536e89cd7ecd421104fe2f6b756e96fd255aa623a339190a35f8581526003602081815260408084208054600282015460018301549290950154835160ff90961686529385019190915290830191909152606082019290925286907fbe3976e28d32740b80f18f5801a0f37dfe790989037762b6fab681180c759eba9060800160405180910390a35b806117d55760405162461bcd60e51b815260206004820152601360248201527f494e5f5245534f4c5554494f4e5f50484153450000000000000000000000000060448201526064016104f2565b8254600160c01b900463ffffffff1615806118005750825463ffffffff838116600160c01b90920416145b61184c5760405162461bcd60e51b815260206004820152601e60248201527f50524556494f55535f434f4d4d49544d454e545f544f5f5245534f4c5645000060448201526064016104f2565b825463ffffffff8316600160c01b81027fffffffff00000000000000000000000000000000000000000000000000000000909216604087811c91909117929092178555905167ffffffffffffffff198616815286907f7c43998fb35751dbddf74d7899a2e8f8f102de5a6c9322174bf38ff581d54f199060200160405180910390a35050505050565b5f6118e1826002612184565b610d099060ff851686901c612192565b610efe8160405160240161190591906121a5565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052611af5565b5f808560030b8460030b61197691906121f0565b90505f8560030b8460030b61198b91906121f0565b90508160070b5f036119cd578060070b6001036119ad57600292505050610d09565b8060070b5f19036119c2575f92505050610d09565b600492505050610d09565b8160070b6001036119e357600192505050610d09565b8160070b5f19036119c257600392505050610d09565b5f600a80825b6003811015611a7d57611a1c86611a1760018661205f565b611b15565b9250611a2d85611a1760018561205f565b91508160ff168360ff161115611a4f57611a48846001612236565b9350611a6b565b8160ff168360ff161015611a6b57611a68600185612256565b93505b80611a7581611e96565b9150506119ff565b50505092915050565b610efe81604051602401611a9c91815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff5b1bba9000000000000000000000000000000000000000000000000000000001790525b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b5f80611b22600184612256565b5f0b90505b5f8112611b615761ffff808516821c1615611b4f57611b47816001612276565b915050610a6c565b80611b598161229d565b915050611b27565b505f9392505050565b6040518060600160405280611b7d611b90565b81525f6020820181905260409091015290565b60405180608001604052806004906020820280368337509192915050565b5f60208284031215611bbe575f80fd5b5035919050565b803561ffff81168114611bd6575f80fd5b919050565b803567ffffffffffffffff1981168114611bd6575f80fd5b5f805f805f8060a08789031215611c08575f80fd5b8635955060208701359450604087013567ffffffffffffffff80821115611c2d575f80fd5b818901915089601f830112611c40575f80fd5b813581811115611c4e575f80fd5b8a60208260061b8501011115611c62575f80fd5b602083019650809550505050611c7a60608801611bc5565b9150611c8860808801611bdb565b90509295509295509295565b5f8060408385031215611ca5575f80fd5b50508035926020909101359150565b5f8060408385031215611cc5575f80fd5b82359150611cd560208401611bdb565b90509250929050565b803563ffffffff81168114611bd6575f80fd5b5f8060408385031215611d02575f80fd5b611d0b83611cde565b946020939093013593505050565b8035600381900b8114611bd6575f80fd5b5f8060408385031215611d3b575f80fd5b611d4483611d19565b9150611cd560208401611d19565b815160c0820190825f5b6004811015611d7d5782511515825260209283019290910190600101611d5c565b505050602083015115156080830152604090920151151560a09091015290565b5f60208284031215611dad575f80fd5b81356001600160a01b0381168114611dc3575f80fd5b9392505050565b5f805f60608486031215611ddc575f80fd5b611de584611cde565b9250611df360208501611d19565b9150611e0160408501611d19565b90509250925092565b5f60408284031215611e1a575f80fd5b6040516040810181811067ffffffffffffffff82111715611e4957634e487b7160e01b5f52604160045260245ffd5b6040528235815260208301358015158114611e62575f80fd5b60208201529392505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f5f198203611ea757611ea7611e82565b5060010190565b80820180821115610a6c57610a6c611e82565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff80841680611eeb57611eeb611ec1565b92169190910692915050565b63ffffffff828116828216039080821115611f1457611f14611e82565b5092915050565b81810381811115610a6c57610a6c611e82565b5f82611f3c57611f3c611ec1565b500490565b8082028115828204841417610a6c57610a6c611e82565b5f8151808452602080850194508084015f5b83811015611f935781518051885283015115158388015260409096019590820190600101611f6a565b509495945050505050565b848152608060208201525f611fb66080830186611f58565b905061ffff8416604083015267ffffffffffffffff198316606083015295945050505050565b838152606060208201525f611ff46060830185611f58565b905061ffff83166040830152949350505050565b63ffffffff818116838216019080821115611f1457611f14611e82565b60ff8181168382160190811115610a6c57610a6c611e82565b5f60ff83168061205057612050611ec1565b8060ff84160691505092915050565b60ff8281168282160390811115610a6c57610a6c611e82565b604081525f61208a6040830185611f58565b905067ffffffffffffffff19831660208301529392505050565b600181815b808511156120de57815f19048211156120c4576120c4611e82565b808516156120d157918102915b93841c93908002906120a9565b509250929050565b5f826120f457506001610a6c565b8161210057505f610a6c565b816001811461211657600281146121205761213c565b6001915050610a6c565b60ff84111561213157612131611e82565b50506001821b610a6c565b5060208310610133831016604e8410600b841016171561215f575081810a610a6c565b61216983836120a4565b805f190482111561217c5761217c611e82565b029392505050565b5f611dc360ff8416836120e6565b5f826121a0576121a0611ec1565b500690565b5f6020808352835180828501525f5b818110156121d0578581018301518582016040015282016121b4565b505f604082860101526040601f19601f8301168501019250505092915050565b600782810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000008112677fffffffffffffff82131715610a6c57610a6c611e82565b5f81810b9083900b01607f8113607f1982121715610a6c57610a6c611e82565b5f82810b9082900b03607f198112607f82131715610a6c57610a6c611e82565b8082018281125f83128015821682158216171561229557612295611e82565b505092915050565b5f7f800000000000000000000000000000000000000000000000000000000000000082036122cd576122cd611e82565b505f19019056fea2646970667358221220d7bbefc6279a657f8e608a154af90397641f6155495f9eaaa39d646c41fd95af64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9801,
        "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
        "label": "goldBattles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GoldBattle)9767_storage))"
      },
      {
        "astId": 9808,
        "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
        "label": "monsterBattles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(MonsterBattle)9770_storage))"
      },
      {
        "astId": 9812,
        "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
        "label": "monsterClaims",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9817,
        "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
        "label": "characters",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Character)9762_storage)"
      },
      {
        "astId": 9821,
        "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
        "label": "owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9826,
        "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
        "label": "commitments",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Commitment)9775_storage)"
      },
      {
        "astId": 9828,
        "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
        "label": "epochHash_0",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 9830,
        "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
        "label": "epochHash_1",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes24": {
        "encoding": "inplace",
        "label": "bytes24",
        "numberOfBytes": "24"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(GoldBattle)9767_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Dungeon.GoldBattle))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(GoldBattle)9767_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(MonsterBattle)9770_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Dungeon.MonsterBattle))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(MonsterBattle)9770_storage)"
      },
      "t_mapping(t_uint256,t_struct(Character)9762_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dungeon.Character)",
        "numberOfBytes": "32",
        "value": "t_struct(Character)9762_storage"
      },
      "t_mapping(t_uint256,t_struct(Commitment)9775_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dungeon.Commitment)",
        "numberOfBytes": "32",
        "value": "t_struct(Commitment)9775_storage"
      },
      "t_mapping(t_uint256,t_struct(GoldBattle)9767_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dungeon.GoldBattle)",
        "numberOfBytes": "32",
        "value": "t_struct(GoldBattle)9767_storage"
      },
      "t_mapping(t_uint256,t_struct(MonsterBattle)9770_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dungeon.MonsterBattle)",
        "numberOfBytes": "32",
        "value": "t_struct(MonsterBattle)9770_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Character)9762_storage": {
        "encoding": "inplace",
        "label": "struct Dungeon.Character",
        "members": [
          {
            "astId": 9753,
            "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9755,
            "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
            "label": "gold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9757,
            "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
            "label": "life",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 9759,
            "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
            "label": "equipment",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 9761,
            "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
            "label": "combatStanceAvailable",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Commitment)9775_storage": {
        "encoding": "inplace",
        "label": "struct Dungeon.Commitment",
        "members": [
          {
            "astId": 9772,
            "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes24"
          },
          {
            "astId": 9774,
            "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
            "label": "epoch",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(GoldBattle)9767_storage": {
        "encoding": "inplace",
        "label": "struct Dungeon.GoldBattle",
        "members": [
          {
            "astId": 9764,
            "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
            "label": "currentWinner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9766,
            "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
            "label": "combatStance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MonsterBattle)9770_storage": {
        "encoding": "inplace",
        "label": "struct Dungeon.MonsterBattle",
        "members": [
          {
            "astId": 9769,
            "contract": "src/TimeControlledDungeon.sol:TimeControlledDungeon",
            "label": "life",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "args_data": "0x",
  "tx_hash": "0x",
  "data": "0x"
}
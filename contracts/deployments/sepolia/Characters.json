{
  "address": "0xb0360B510Be1AD9d656BB45B1EB9fA668dDeB021",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonceOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provided",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        }
      ],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferRejected",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "namespace",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "VesselDataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "namespace",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "slotData",
          "type": "bytes32"
        }
      ],
      "name": "VesselSlotUpdate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "namespace",
          "type": "address"
        }
      ],
      "name": "getDataFor",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getSlot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "namespace",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getSlotFor",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        }
      ],
      "name": "ownerAndLastTransferBlockNumberList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTransferBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC721WithBlocknumber.OwnerData[]",
          "name": "ownersData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerAndLastTransferBlockNumberOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "slotData",
          "type": "bytes32"
        }
      ],
      "name": "setSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4040d225835c0b04285c0fede2367357552ebc3326cb8bd4538cd83e6411a30",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0xb0360B510Be1AD9d656BB45B1EB9fA668dDeB021",
    "transactionIndex": 92,
    "gasUsed": "1334846",
    "logsBloom": "0x
    "blockHash": "0xe02748979e74b0131b2c990153ec981b96cfc57509dfe39ebac23838ec755ce5",
    "transactionHash": "0xd4040d225835c0b04285c0fede2367357552ebc3326cb8bd4538cd83e6411a30",
    "logs": [],
    "blockNumber": 3542401,
    "cumulativeGasUsed": "10323982",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dd10a42ce07f21a083a7ea04090d94a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provided\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferRejected\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"namespace\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"VesselDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"namespace\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"slotData\",\"type\":\"bytes32\"}],\"name\":\"VesselSlotUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"namespace\",\"type\":\"address\"}],\"name\":\"getDataFor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"namespace\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSlotFor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"ownerAndLastTransferBlockNumberList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC721WithBlocknumber.OwnerData[]\",\"name\":\"ownersData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerAndLastTransferBlockNumberOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"slotData\",\"type\":\"bytes32\"}],\"name\":\"setSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidAddress(address)\":[{\"params\":{\"addr\":\"invalid address\"}}],\"NonExistentToken(uint256)\":[{\"params\":{\"tokenID\":\"id of the expected token\"}}],\"NotOwner(address,address)\":[{\"params\":{\"currentOwner\":\"the current owner\",\"provided\":\"the address expected to be the current owner\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"account who can know transfer on the owner's behalf\",\"owner\":\"current owner of the token\",\"tokenID\":\"id of the token being approved\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"whether it is approved or not\",\"operator\":\"account who can know transfer on the owner's behalf\",\"owner\":\"the account granting rights over all of its token\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"the account the token is sent from\",\"to\":\"the account the token is sent to\",\"tokenID\":\"id of the token being sent\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"The address receiving the approval.\",\"tokenID\":\"The id of the token.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"balance\":\"The number of tokens owned by the address.\"}},\"getApproved(uint256)\":{\"params\":{\"tokenID\":\"The id of the token.\"},\"returns\":{\"operator\":\"The address of the operator.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"params\":{\"tokenIDs\":\"The list of token ids to check.\"},\"returns\":{\"ownersData\":\"The list of (owner, lastTransferBlockNumber) for each ids given as input.\"}},\"ownerAndLastTransferBlockNumberOf(uint256)\":{\"params\":{\"tokenID\":\"The id of the token.\"},\"returns\":{\"blockNumber\":\"The blocknumber at which the last transfer of that id happened.\",\"owner\":\"The address of the token owner.\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenID\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"to\":\"The recipient of the token.\",\"tokenID\":\"The id of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"to\":\"The recipient of the token.\",\"tokenID\":\"The id of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"to\":\"The recipient of the token.\",\"tokenID\":\"The id of the token.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidAddress(address)\":[{\"notice\":\"An invalid address is specified (for example: zero address)\"}],\"NonExistentToken(uint256)\":[{\"notice\":\"The token does not exist\"}],\"NonceOverflow()\":[{\"notice\":\"The Nonce overflowed, make a transfer to self to allow new nonces.\"}],\"NotAuthorized()\":[{\"notice\":\"Not authorized to perform this operation\"}],\"NotOwner(address,address)\":[{\"notice\":\"The address from which the token is sent is not the current owner\"}],\"TransferRejected()\":[{\"notice\":\"The Transfer was rejected by the destination\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Triggered when a token is approved to be sent by another account  Note tat the approval get reset when a Transfer event for that same token is emitted.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Triggered when an account approve or disaprove another to transfer on its behalf\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Triggered when a token is transferred\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to transfer a specific token on the senders behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"getData(uint256)\":{\"notice\":\"return the character's data for the caller's namespace\"},\"getDataFor(uint256,address)\":{\"notice\":\"return the character's data for the provided namespace\"},\"getSlot(uint256,uint256)\":{\"notice\":\"return the character's slot data for the caller's namespace\"},\"getSlotFor(uint256,address,uint256)\":{\"notice\":\"return the character's slot data for the provided namespace\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator to transfer any of its tokens.\"},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"notice\":\"Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\"},\"ownerAndLastTransferBlockNumberOf(uint256)\":{\"notice\":\"Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism.\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setData(uint256,bytes)\":{\"notice\":\"set the character's data on the caller's namespace\"},\"setSlot(uint256,uint256,bytes32)\":{\"notice\":\"set the character's slot data on the caller's namespace\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Characters.sol\":\"Characters\"},\"evmVersion\":\"shanghai\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363834383332343131383336\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solidity-kit/solc_0.8/ERC165/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n\\t/// @notice Query if a contract implements an interface\\n\\t/// @param interfaceID The interface identifier, as specified in ERC-165\\n\\t/// @dev Interface identification is specified in ERC-165. This function\\n\\t///  uses less than 30,000 gas.\\n\\t/// @return `true` if the contract implements `interfaceID` and\\n\\t///  `interfaceID` is not 0xffffffff, `false` otherwise\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x036eb02f585d3f298df9fc1470e1d761b74e86793b6c27d8d8608620146b3cf9\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/BasicERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IERC721WithBlocknumber.sol\\\";\\nimport \\\"./ImplementingERC721Internal.sol\\\";\\n\\nimport \\\"../../openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract BasicERC721 is IERC721, IERC721WithBlocknumber, ImplementingERC721Internal {\\n\\tusing Openzeppelin_Address for address;\\n\\n\\tbytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n\\n\\tuint256 internal constant OPERATOR_FLAG = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\tmapping(uint256 => uint256) internal _owners;\\n\\tmapping(address => uint256) internal _balances;\\n\\tmapping(address => mapping(address => bool)) internal _operatorsForAll;\\n\\tmapping(uint256 => address) internal _operators;\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction approve(address operator, uint256 tokenID) external override {\\n\\t\\t(address owner, uint256 nonce) = _ownerAndNonceOf(tokenID);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenID);\\n\\t\\t}\\n\\t\\tif (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) {\\n\\t\\t\\trevert NotAuthorized();\\n\\t\\t}\\n\\t\\t_approveFor(owner, nonce, operator, tokenID);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID\\n\\t) external override {\\n\\t\\t(address owner, uint256 nonce, bool operatorEnabled) = _ownerNonceAndOperatorEnabledOf(tokenID);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenID);\\n\\t\\t}\\n\\t\\tif (from != owner) {\\n\\t\\t\\trevert NotOwner(from, owner);\\n\\t\\t}\\n\\t\\tif (to == address(0) || to == address(this)) {\\n\\t\\t\\trevert InvalidAddress(to);\\n\\t\\t}\\n\\t\\tif (msg.sender != from) {\\n\\t\\t\\tif (!(operatorEnabled && _operators[tokenID] == msg.sender) && !isApprovedForAll(from, msg.sender)) {\\n\\t\\t\\t\\trevert NotAuthorized();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_transferFrom(from, to, tokenID, (nonce >> 24) != 0);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID\\n\\t) external override {\\n\\t\\tsafeTransferFrom(from, to, tokenID, \\\"\\\");\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction setApprovalForAll(address operator, bool approved) external override {\\n\\t\\t_setApprovalForAll(msg.sender, operator, approved);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction balanceOf(address owner) public view virtual override returns (uint256 balance) {\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert InvalidAddress(owner);\\n\\t\\t}\\n\\t\\tbalance = _balances[owner];\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction ownerOf(uint256 tokenID) external view override returns (address owner) {\\n\\t\\towner = _ownerOf(tokenID);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenID);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction getApproved(uint256 tokenID) external view override returns (address operator) {\\n\\t\\t(address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(tokenID);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenID);\\n\\t\\t}\\n\\t\\tif (operatorEnabled) {\\n\\t\\t\\treturn _operators[tokenID];\\n\\t\\t} else {\\n\\t\\t\\treturn address(0);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool isOperator) {\\n\\t\\treturn _operatorsForAll[owner][operator];\\n\\t}\\n\\n\\t/// @inheritdoc IERC721\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID,\\n\\t\\tbytes memory data\\n\\t) public override {\\n\\t\\t(address owner, uint256 nonce, bool operatorEnabled) = _ownerNonceAndOperatorEnabledOf(tokenID);\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert NonExistentToken(tokenID);\\n\\t\\t}\\n\\t\\tif (owner != from) {\\n\\t\\t\\trevert NotOwner(from, owner);\\n\\t\\t}\\n\\n\\t\\tif (to == address(0) || to == address(this)) {\\n\\t\\t\\trevert InvalidAddress(to);\\n\\t\\t}\\n\\n\\t\\tif (msg.sender != from) {\\n\\t\\t\\tif (!(operatorEnabled && _operators[tokenID] == msg.sender) && !isApprovedForAll(from, msg.sender)) {\\n\\t\\t\\t\\trevert NotAuthorized();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_safeTransferFrom(from, to, tokenID, (nonce >> 24) != 0, data);\\n\\t}\\n\\n\\t/// @inheritdoc IERC165\\n\\tfunction supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n\\t\\t/// 0x01ffc9a7 is ERC165.\\n\\t\\t/// 0x80ac58cd is ERC721\\n\\t\\t/// 0x5b5e139f is for ERC721 metadata\\n\\t\\treturn interfaceID == 0x01ffc9a7 || interfaceID == 0x80ac58cd || interfaceID == 0x5b5e139f;\\n\\t}\\n\\n\\t/// @inheritdoc IERC721WithBlocknumber\\n\\tfunction ownerAndLastTransferBlockNumberOf(uint256 tokenID)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (address owner, uint256 blockNumber)\\n\\t{\\n\\t\\t(address currentOwner, uint256 nonce) = _ownerAndNonceOf(tokenID);\\n\\t\\towner = currentOwner;\\n\\t\\tblockNumber = (nonce >> 24);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721WithBlocknumber\\n\\tfunction ownerAndLastTransferBlockNumberList(uint256[] calldata tokenIDs)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (OwnerData[] memory ownersData)\\n\\t{\\n\\t\\townersData = new OwnerData[](tokenIDs.length);\\n\\t\\tfor (uint256 i = 0; i < tokenIDs.length; i++) {\\n\\t\\t\\tuint256 data = _owners[tokenIDs[i]];\\n\\t\\t\\townersData[i].owner = address(uint160(data));\\n\\t\\t\\townersData[i].lastTransferBlockNumber = (data >> 184) & 0xFFFFFFFFFFFFFFFF;\\n\\t\\t}\\n\\t}\\n\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\t// INTERNALS\\n\\t// ------------------------------------------------------------------------------------------------------------------\\n\\n\\tfunction _safeMint(address to, uint256 tokenID) internal {\\n\\t\\t_safeTransferFrom(address(0), to, tokenID, false, \\\"\\\");\\n\\t}\\n\\n\\tfunction _safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID,\\n\\t\\tbool registered,\\n\\t\\tbytes memory data\\n\\t) internal {\\n\\t\\t_transferFrom(from, to, tokenID, registered);\\n\\t\\tif (to.isContract()) {\\n\\t\\t\\tif (!_checkOnERC721Received(msg.sender, from, to, tokenID, data)) {\\n\\t\\t\\t\\trevert TransferRejected();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID,\\n\\t\\tbool registered\\n\\t) internal virtual {\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[to]++;\\n\\t\\t\\tif (registered) {\\n\\t\\t\\t\\t_balances[from]--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// We encode the blockNumber in the token nonce. We can then use it for count voting.\\n\\t\\t_owners[tokenID] = (block.number << 184) | uint256(uint160(to));\\n\\t\\temit Transfer(from, to, tokenID);\\n\\t}\\n\\n\\t/// @dev See approve.\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce,\\n\\t\\taddress operator,\\n\\t\\tuint256 tokenID\\n\\t) internal override {\\n\\t\\tuint256 blockNumber = nonce >> 24;\\n\\t\\tuint256 newNonce = nonce + 1;\\n\\t\\tif (newNonce >> 24 != blockNumber) {\\n\\t\\t\\trevert NonceOverflow();\\n\\t\\t}\\n\\t\\tif (operator == address(0)) {\\n\\t\\t\\t_owners[tokenID] = (newNonce << 160) | uint256(uint160(owner));\\n\\t\\t} else {\\n\\t\\t\\t_owners[tokenID] = OPERATOR_FLAG | ((newNonce << 160) | uint256(uint160(owner)));\\n\\t\\t\\t_operators[tokenID] = operator;\\n\\t\\t}\\n\\t\\temit Approval(owner, operator, tokenID);\\n\\t}\\n\\n\\t/// @dev See setApprovalForAll.\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress sender,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal override {\\n\\t\\t_operatorsForAll[sender][operator] = approved;\\n\\n\\t\\temit ApprovalForAll(sender, operator, approved);\\n\\t}\\n\\n\\t/// @dev Check if receiving contract accepts erc721 transfers.\\n\\t/// @param operator The address of the operator.\\n\\t/// @param from The from address, may be different from msg.sender.\\n\\t/// @param to The adddress we want to transfer to.\\n\\t/// @param tokenID The id of the token we would like to transfer.\\n\\t/// @param data Any additional data to send with the transfer.\\n\\t/// @return Whether the expected value of 0x150b7a02 is returned.\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID,\\n\\t\\tbytes memory data\\n\\t) internal returns (bool) {\\n\\t\\tbytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, tokenID, data);\\n\\t\\treturn (retval == ERC721_RECEIVED);\\n\\t}\\n\\n\\t/// @dev Get the owner of a token.\\n\\t/// @param tokenID The token to query.\\n\\tfunction _ownerOf(uint256 tokenID) internal view virtual returns (address owner) {\\n\\t\\treturn address(uint160(_owners[tokenID]));\\n\\t}\\n\\n\\t/// @dev Get the owner and operatorEnabled status of a token.\\n\\t/// @param tokenID The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return operatorEnabled Whether or not operators are enabled for this token.\\n\\tfunction _ownerAndOperatorEnabledOf(uint256 tokenID)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (address owner, bool operatorEnabled)\\n\\t{\\n\\t\\tuint256 data = _owners[tokenID];\\n\\t\\towner = address(uint160(data));\\n\\t\\toperatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n\\t}\\n\\n\\t/// @dev Get the owner and the permit nonce of a token.\\n\\t/// @param tokenID The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return nonce the nonce for permit (also incluse the blocknumer in the 64 higer bits (88 bits in total))\\n\\tfunction _ownerAndNonceOf(uint256 tokenID) internal view virtual override returns (address owner, uint256 nonce) {\\n\\t\\tuint256 data = _owners[tokenID];\\n\\t\\towner = address(uint160(data));\\n\\t\\tnonce = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t}\\n\\n\\t// @dev Get the owner, the permit nonce of a token and operatorEnabled status of a token.\\n\\t/// @param tokenID The token to query.\\n\\t/// @return owner The owner of the token.\\n\\t/// @return nonce the nonce for permit (also incluse the blocknumer in the 64 higer bits (88 bits in total))\\n\\t/// @return operatorEnabled Whether or not operators are enabled for this token.\\n\\tfunction _ownerNonceAndOperatorEnabledOf(uint256 tokenID)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (\\n\\t\\t\\taddress owner,\\n\\t\\t\\tuint256 nonce,\\n\\t\\t\\tbool operatorEnabled\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 data = _owners[tokenID];\\n\\t\\towner = address(uint160(data));\\n\\t\\toperatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n\\t\\tnonce = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf0f692fd8f92f3860a2caee0dceb1178eab4fc0aaf23590f81b16274b738190e\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/implementations/ImplementingERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ImplementingERC721Internal {\\n\\tfunction _ownerAndNonceOf(uint256 tokenID) internal view virtual returns (address owner, uint256 nonce);\\n\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce,\\n\\t\\taddress operator,\\n\\t\\tuint256 tokenID\\n\\t) internal virtual;\\n\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress sender,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal virtual;\\n}\\n\",\"keccak256\":\"0xfb4e33ff8e5bf69da8c47bc7d3bf3544b440383efebc5bc8ca412ebab35e2824\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../ERC165/interfaces/IERC165.sol\\\";\\nimport \\\"../../utils/GenericErrors.sol\\\";\\n\\ninterface IERC721Supply {\\n\\t/// @notice return the total number of token in existence\\n\\tfunction totalSupply() external view returns (uint256);\\n}\\n\\ninterface IERC721 is IERC165 {\\n\\t/// @notice Triggered when a token is transferred\\n\\t/// @param from the account the token is sent from\\n\\t/// @param to the account the token is sent to\\n\\t/// @param tokenID id of the token being sent\\n\\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenID);\\n\\n\\t/// @notice Triggered when a token is approved to be sent by another account\\n\\t///  Note tat the approval get reset when a Transfer event for that same token is emitted.\\n\\t/// @param owner current owner of the token\\n\\t/// @param approved account who can know transfer on the owner's behalf\\n\\t/// @param tokenID id of the token being approved\\n\\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenID);\\n\\n\\t/// @notice Triggered when an account approve or disaprove another to transfer on its behalf\\n\\t/// @param owner the account granting rights over all of its token\\n\\t/// @param operator account who can know transfer on the owner's behalf\\n\\t/// @param approved whether it is approved or not\\n\\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\\t/// @notice The token does not exist\\n\\t/// @param tokenID id of the expected token\\n\\terror NonExistentToken(uint256 tokenID);\\n\\t/// @notice The address from which the token is sent is not the current owner\\n\\t/// @param provided the address expected to be the current owner\\n\\t/// @param currentOwner the current owner\\n\\terror NotOwner(address provided, address currentOwner);\\n\\t/// @notice An invalid address is specified (for example: zero address)\\n\\t/// @param addr invalid address\\n\\terror InvalidAddress(address addr);\\n\\t/// @notice The Transfer was rejected by the destination\\n\\terror TransferRejected();\\n\\t/// @notice The Nonce overflowed, make a transfer to self to allow new nonces.\\n\\terror NonceOverflow();\\n\\n\\t/// @notice Get the number of tokens owned by an address.\\n\\t/// @param owner The address to look for.\\n\\t/// @return balance The number of tokens owned by the address.\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\n\\n\\t/// @notice Get the owner of a token.\\n\\t/// @param tokenID The id of the token.\\n\\t/// @return owner The address of the token owner.\\n\\tfunction ownerOf(uint256 tokenID) external view returns (address owner);\\n\\n\\t/// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n\\t/// @param from The sender of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param tokenID The id of the token.\\n\\t/// @param data Additional data.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\t/// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n\\t/// @param from The send of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param tokenID The id of the token.\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID\\n\\t) external;\\n\\n\\t/// @notice Transfer a token between 2 addresses.\\n\\t/// @param from The sender of the token.\\n\\t/// @param to The recipient of the token.\\n\\t/// @param tokenID The id of the token.\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenID\\n\\t) external;\\n\\n\\t/// @notice Approve an operator to transfer a specific token on the senders behalf.\\n\\t/// @param operator The address receiving the approval.\\n\\t/// @param tokenID The id of the token.\\n\\tfunction approve(address operator, uint256 tokenID) external;\\n\\n\\t/// @notice Set the approval for an operator to manage all the tokens of the sender.\\n\\t/// @param operator The address receiving the approval.\\n\\t/// @param approved The determination of the approval.\\n\\tfunction setApprovalForAll(address operator, bool approved) external;\\n\\n\\t/// @notice Get the approved operator for a specific token.\\n\\t/// @param tokenID The id of the token.\\n\\t/// @return operator The address of the operator.\\n\\tfunction getApproved(uint256 tokenID) external view returns (address operator);\\n\\n\\t/// @notice Check if the sender approved the operator to transfer any of its tokens.\\n\\t/// @param owner The address of the owner.\\n\\t/// @param operator The address of the operator.\\n\\t/// @return isOperator The status of the approval.\\n\\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4df60787dd909ce77b09140217d364b2892756586b187f74035082e47ecfcd17\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Receiver {\\n\\t/// @notice Handle the receipt of an NFT\\n\\t/// @dev The ERC721 smart contract calls this function on the recipient\\n\\t///  after a `transfer`. This function MAY throw to revert and reject the\\n\\t///  transfer. Return of other than the magic value MUST result in the\\n\\t///  transaction being reverted.\\n\\t///  Note: the contract address is always the message sender.\\n\\t/// @param operator The address which called `safeTransferFrom` function\\n\\t/// @param from The address which previously owned the token\\n\\t/// @param tokenID The NFT identifier which is being transferred\\n\\t/// @param data Additional data with no specified format\\n\\t/// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n\\t///  unless throwing\\n\\tfunction onERC721Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 tokenID,\\n\\t\\tbytes calldata data\\n\\t) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x1d23357c0e47a1577b28f87d36457cb1bfba01b3d2d807cbda6ee476b9f84b30\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/ERC721/interfaces/IERC721WithBlocknumber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721WithBlocknumber {\\n\\t/// @notice Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism.\\n\\t/// @param tokenID The id of the token.\\n\\t/// @return owner The address of the token owner.\\n\\t/// @return blockNumber The blocknumber at which the last transfer of that id happened.\\n\\tfunction ownerAndLastTransferBlockNumberOf(uint256 tokenID)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address owner, uint256 blockNumber);\\n\\n\\tstruct OwnerData {\\n\\t\\taddress owner;\\n\\t\\tuint256 lastTransferBlockNumber;\\n\\t}\\n\\n\\t/// @notice Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\\n\\t/// @param tokenIDs The list of token ids to check.\\n\\t/// @return ownersData The list of (owner, lastTransferBlockNumber) for each ids given as input.\\n\\tfunction ownerAndLastTransferBlockNumberList(uint256[] calldata tokenIDs)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (OwnerData[] memory ownersData);\\n}\\n\",\"keccak256\":\"0x984c7ea95237ebb72d22b4bbc9ecddee00a33be1daf476fb6333e09136f08fc9\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Openzeppelin_Address {\\n\\t/**\\n\\t * @dev Returns true if `account` is a contract.\\n\\t *\\n\\t * [IMPORTANT]\\n\\t * ====\\n\\t * It is unsafe to assume that an address for which this function returns\\n\\t * false is an externally-owned account (EOA) and not a contract.\\n\\t *\\n\\t * Among others, `isContract` will return false for the following\\n\\t * types of addresses:\\n\\t *\\n\\t *  - an externally-owned account\\n\\t *  - a contract in construction\\n\\t *  - an address where a contract will be created\\n\\t *  - an address where a contract lived, but was destroyed\\n\\t * ====\\n\\t *\\n\\t * [IMPORTANT]\\n\\t * ====\\n\\t * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n\\t *\\n\\t * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n\\t * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n\\t * constructor.\\n\\t * ====\\n\\t */\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\t// This method relies on extcodesize/address.code.length, which returns 0\\n\\t\\t// for contracts in construction, since the code is only stored at the end\\n\\t\\t// of the constructor execution.\\n\\n\\t\\treturn account.code.length > 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n\\t * `recipient`, forwarding all available gas and reverting on errors.\\n\\t *\\n\\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n\\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n\\t * imposed by `transfer`, making them unable to receive funds via\\n\\t * `transfer`. {sendValue} removes this limitation.\\n\\t *\\n\\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n\\t *\\n\\t * IMPORTANT: because control is transferred to `recipient`, care must be\\n\\t * taken to not create reentrancy vulnerabilities. Consider using\\n\\t * {ReentrancyGuard} or the\\n\\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n\\t */\\n\\tfunction sendValue(address payable recipient, uint256 amount) internal {\\n\\t\\trequire(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n\\t\\t(bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n\\t\\trequire(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Performs a Solidity function call using a low level `call`. A\\n\\t * plain `call` is an unsafe replacement for a function call: use this\\n\\t * function instead.\\n\\t *\\n\\t * If `target` reverts with a revert reason, it is bubbled up by this\\n\\t * function (like regular Solidity function calls).\\n\\t *\\n\\t * Returns the raw returned data. To convert to the expected return value,\\n\\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `target` must be a contract.\\n\\t * - calling `target` with `data` must not revert.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"Address: low-level call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n\\t * `errorMessage` as a fallback revert reason when `target` reverts.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, 0, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but also transferring `value` wei to `target`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the calling contract must have an ETH balance of at least `value`.\\n\\t * - the called Solidity function must be `payable`.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCallWithValue(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tuint256 value\\n\\t) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n\\t * with `errorMessage` as a fallback revert reason when `target` reverts.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCallWithValue(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tuint256 value,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n\\t\\trequire(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.call{value: value}(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but performing a static call.\\n\\t *\\n\\t * _Available since v3.3._\\n\\t */\\n\\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n\\t\\treturn functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n\\t * but performing a static call.\\n\\t *\\n\\t * _Available since v3.3._\\n\\t */\\n\\tfunction functionStaticCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal view returns (bytes memory) {\\n\\t\\trequire(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.staticcall(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but performing a delegate call.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n\\t * but performing a delegate call.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction functionDelegateCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.delegatecall(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n\\t * revert reason using the provided one.\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction verifyCallResult(\\n\\t\\tbool success,\\n\\t\\tbytes memory returndata,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (bytes memory) {\\n\\t\\tif (success) {\\n\\t\\t\\treturn returndata;\\n\\t\\t} else {\\n\\t\\t\\t// Look for revert reason and bubble it up if present\\n\\t\\t\\tif (returndata.length > 0) {\\n\\t\\t\\t\\t// The easiest way to bubble the revert reason is using memory via assembly\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(returndata)\\n\\t\\t\\t\\t\\trevert(add(32, returndata), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(errorMessage);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xda14142ec34e7dde33eabb747152062eb9d9aad16036f6498340418f59c83c97\",\"license\":\"MIT\"},\"solidity-kit/solc_0.8/utils/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Not authorized to perform this operation\\nerror NotAuthorized();\\n\",\"keccak256\":\"0x333aa48943e66849a9350384e7ec2553b93e8a8a12b8ad300d3341f7c98b60fd\",\"license\":\"MIT\"},\"src/Characters.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Vessels.sol\\\";\\n\\ncontract Characters is Vessels {\\n    function mint(uint256 tokenID, address to) external {\\n        // return _safeMint(to, id);\\n        return _transferFrom(address(0), to, tokenID, false);\\n    }\\n}\\n\",\"keccak256\":\"0xce3adcbc22d1180b802679c70b56363a5933fd22fc6b3653cf5e512dd046b726\",\"license\":\"AGPL-3.0\"},\"src/Vessels.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"solidity-kit/solc_0.8/ERC721/implementations/BasicERC721.sol\\\";\\n\\nabstract contract Vessels is BasicERC721 {\\n    // ----------------------------------------------------------------------------------------------\\n    // EVENTS\\n    // ----------------------------------------------------------------------------------------------\\n    event VesselSlotUpdate(uint256 indexed id, address indexed namespace, uint256 indexed slot, bytes32 slotData);\\n    event VesselDataUpdate(uint256 indexed id, address indexed namespace, bytes data);\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // STORAGE\\n    // ----------------------------------------------------------------------------------------------\\n    mapping(uint256 => mapping(address => mapping(uint256 => bytes32))) _slots;\\n    mapping(uint256 => mapping(address => bytes)) _data;\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // PUBLIC INTERFACE\\n    // ----------------------------------------------------------------------------------------------\\n\\n    /// @notice return the character's slot data for the caller's namespace\\n    function getSlot(uint256 id, uint256 index) external view returns (bytes32) {\\n        return _slots[id][msg.sender][index];\\n    }\\n\\n    /// @notice return the character's slot data for the provided namespace\\n    function getSlotFor(uint256 id, address namespace, uint256 index) external view returns (bytes32) {\\n        return _slots[id][namespace][index];\\n    }\\n\\n    /// @notice set the character's slot data on the caller's namespace\\n    function setSlot(uint256 id, uint256 index, bytes32 slotData) external {\\n        _setSlotFor(id, msg.sender, index, slotData);\\n    }\\n\\n    // /// @notice set the character's slot data on the provided namespace\\n    // function setSlot(uint256 id, address namespace, uint256 index, bytes32 slotData) external {\\n    //     revert(\\\"NOT_IMPLEMENTED\\\");\\n    //     // TODO allow delegation for other contract to setData on some other contract\\n    //     // require(msg.sender == );\\n    //     // _setSlotFor(id, msg.sender, index, slotData);\\n    // }\\n\\n    /// @notice return the character's data for the caller's namespace\\n    function getData(uint256 id) external view returns (bytes memory) {\\n        return _data[id][msg.sender];\\n    }\\n\\n    /// @notice return the character's data for the provided namespace\\n    function getDataFor(uint256 id, address namespace) external view returns (bytes memory) {\\n        return _data[id][namespace];\\n    }\\n\\n    /// @notice set the character's data on the caller's namespace\\n    function setData(uint256 id, bytes calldata data) external {\\n        _setDataFor(id, msg.sender, data);\\n    }\\n\\n    // /// @notice set the character's data on the provided namespace\\n    // function setData(uint256 id, address namespace, bytes calldata data) external {\\n    //     revert(\\\"NOT_IMPLEMENTED\\\");\\n    //     // TODO allow delegation for other contract to setData on some other contract\\n    //     // require(msg.sender == );\\n    //     // _setDataFor(id, msg.sender, index, slotData);\\n    // }\\n\\n    // ----------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // ----------------------------------------------------------------------------------------------\\n    function _setSlotFor(uint256 id, address namespace, uint256 index, bytes32 slotData) internal {\\n        _slots[id][namespace][index] = slotData;\\n        emit VesselSlotUpdate(id, namespace, index, slotData);\\n    }\\n\\n    function _setDataFor(uint256 id, address namespace, bytes memory data) internal {\\n        _data[id][namespace] = data;\\n        emit VesselDataUpdate(id, namespace, data);\\n    }\\n}\\n\",\"keccak256\":\"0x1b01826f1e0382e74258f373b6a07afaa077bae5b193b87e6d10883f8dd5d2ac\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b5061173b8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610149575f3560e01c80636352211e116100c7578063b88d4fde1161007d578063de572b7611610063578063de572b761461034e578063e985e9c514610361578063f39452821461039c575f80fd5b8063b88d4fde14610328578063b9f4be1e1461033b575f80fd5b806394bf804d116100ad57806394bf804d146102c6578063a17d2961146102d9578063a22cb46514610315575f80fd5b80636352211e146102a057806370a08231146102b3575f80fd5b80631f4571ad1161011c57806342842e0e1161010257806342842e0e146101ff57806348f3c51c146102125780635fe975d814610260575f80fd5b80631f4571ad146101d957806323b872dd146101ec575f80fd5b80630178fe3f1461014d57806301ffc9a714610176578063081812fc14610199578063095ea7b3146101c4575b5f80fd5b61016061015b3660046110bb565b6103bc565b60405161016d9190611115565b60405180910390f35b61018961018436600461115e565b610466565b604051901515815260200161016d565b6101ac6101a73660046110bb565b61054a565b6040516001600160a01b03909116815260200161016d565b6101d76101d236600461118f565b6105bc565b005b6101d76101e73660046111b7565b610672565b6101d76101fa3660046111e0565b610683565b6101d761020d3660046111e0565b610815565b6102416102203660046110bb565b5f908152602081905260409020549067ffffffffffffffff60b883901c1690565b604080516001600160a01b03909316835260208301919091520161016d565b61029261026e366004611219565b5f918252600460209081526040808420338552825280842092845291905290205490565b60405190815260200161016d565b6101ac6102ae3660046110bb565b61082f565b6102926102c1366004611239565b61086c565b6101d76102d4366004611252565b6108ba565b6102926102e736600461127c565b5f9283526004602090815260408085206001600160a01b039490941685529281528284209184525290205490565b6101d761032336600461129e565b6108ca565b6101d76103363660046112eb565b6108d5565b6101d76103493660046113c0565b610a69565b61016061035c366004611252565b610aa9565b61018961036f366004611435565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205460ff1690565b6103af6103aa36600461145d565b610b5d565b60405161016d91906114cc565b5f81815260056020908152604080832033845290915290208054606091906103e390611523565b80601f016020809104026020016040519081016040528092919081815260200182805461040f90611523565b801561045a5780601f106104315761010080835404028352916020019161045a565b820191905f5260205f20905b81548152906001019060200180831161043d57829003601f168201915b50505050509050919050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806104f857507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061054457507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b5f81815260208190526040812054600160ff1b808216146001600160a01b038216610590576040516338077a2b60e01b8152600481018590526024015b60405180910390fd5b80156105b3575050505f908152600360205260409020546001600160a01b031690565b505f9392505050565b5f818152602081905260409020546affffffffffffffffffffff60a082901c166001600160a01b038216610606576040516338077a2b60e01b815260048101849052602401610587565b336001600160a01b0383161480159061064257506001600160a01b0382165f90815260026020908152604080832033845290915290205460ff16155b156106605760405163ea8e4eb560e01b815260040160405180910390fd5b61066c82828686610c74565b50505050565b61067e83338484610d9d565b505050565b5f818152602081905260409020546affffffffffffffffffffff60a082901c16600160ff1b808316146001600160a01b0383166106d6576040516338077a2b60e01b815260048101859052602401610587565b826001600160a01b0316866001600160a01b031614610734576040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015284166024820152604401610587565b6001600160a01b038516158061075257506001600160a01b03851630145b1561077b57604051634726455360e11b81526001600160a01b0386166004820152602401610587565b336001600160a01b038716146107fb578080156107ad57505f848152600360205260409020546001600160a01b031633145b1580156107dd57506001600160a01b0386165f90815260026020908152604080832033845290915290205460ff16155b156107fb5760405163ea8e4eb560e01b815260040160405180910390fd5b61080d868686601886901c1515610e06565b505050505050565b61067e83838360405180602001604052805f8152506108d5565b5f818152602081905260409020546001600160a01b038116610867576040516338077a2b60e01b815260048101839052602401610587565b919050565b5f6001600160a01b03821661089f57604051634726455360e11b81526001600160a01b0383166004820152602401610587565b506001600160a01b03165f9081526001602052604090205490565b6108c65f82845f610e06565b5050565b6108c6338383610ea0565b5f828152602081905260409020546affffffffffffffffffffff60a082901c16600160ff1b808316146001600160a01b038316610928576040516338077a2b60e01b815260048101869052602401610587565b866001600160a01b0316836001600160a01b031614610986576040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015284166024820152604401610587565b6001600160a01b03861615806109a457506001600160a01b03861630145b156109cd57604051634726455360e11b81526001600160a01b0387166004820152602401610587565b336001600160a01b03881614610a4d578080156109ff57505f858152600360205260409020546001600160a01b031633145b158015610a2f57506001600160a01b0387165f90815260026020908152604080832033845290915290205460ff16155b15610a4d5760405163ea8e4eb560e01b815260040160405180910390fd5b610a60878787601886901c151588610f2b565b50505050505050565b61067e833384848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610f9192505050565b5f8281526005602090815260408083206001600160a01b03851684529091529020805460609190610ad990611523565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0590611523565b8015610b505780601f10610b2757610100808354040283529160200191610b50565b820191905f5260205f20905b815481529060010190602001808311610b3357829003601f168201915b5050505050905092915050565b60608167ffffffffffffffff811115610b7857610b786112d7565b604051908082528060200260200182016040528015610bbc57816020015b604080518082019091525f8082526020820152815260200190600190039081610b965790505b5090505f5b82811015610c6d575f805f868685818110610bde57610bde61155b565b9050602002013581526020019081526020015f2054905080838381518110610c0857610c0861155b565b60200260200101515f01906001600160a01b031690816001600160a01b03168152505060b881901c67ffffffffffffffff16838381518110610c4c57610c4c61155b565b60209081029190910181015101525080610c6581611583565b915050610bc1565b5092915050565b601883901c5f610c8585600161159b565b905081601882901c14610cc4576040517fadc1557200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416610cf6575f83815260208190526040902060a082901b6001600160a01b038816179055610d54565b5f838152602081815260408083206001600160a01b038a811660a087901b17600160ff1b17909155600390925290912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169186169190911790555b82846001600160a01b0316876001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b5f8481526004602090815260408083206001600160a01b0387168085529083528184208685528352928190208490555183815284929187917f275d1a91488ccf26ab5b0e053c0c504543aa7e61d4191e59262abb72bd180722910160405180910390a450505050565b6001600160a01b0383165f908152600160208190526040909120805490910190558015610e4c576001600160a01b0384165f90815260016020526040902080545f190190555b5f828152602081905260408082204360b81b6001600160a01b0380881691821790925591518593918816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b610f3785858585610e06565b6001600160a01b0384163b15610f8a57610f543386868685610ff7565b610f8a576040517f4e472e5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b5f8381526005602090815260408083206001600160a01b03861684529091529020610fbc82826115f3565b50816001600160a01b0316837f12ea17a7f0a5d5ec5cdb131f323f2226cc1c8edf52ad8e4ce1e44608903158b783604051610f1e9190611115565b5f80846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b815260040161102b94939291906116af565b6020604051808303815f875af1158015611047573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061106b91906116ea565b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b5f602082840312156110cb575f80fd5b5035919050565b5f81518084525f5b818110156110f6576020818501810151868301820152016110da565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f61112760208301846110d2565b9392505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461115b575f80fd5b50565b5f6020828403121561116e575f80fd5b81356111278161112e565b80356001600160a01b0381168114610867575f80fd5b5f80604083850312156111a0575f80fd5b6111a983611179565b946020939093013593505050565b5f805f606084860312156111c9575f80fd5b505081359360208301359350604090920135919050565b5f805f606084860312156111f2575f80fd5b6111fb84611179565b925061120960208501611179565b9150604084013590509250925092565b5f806040838503121561122a575f80fd5b50508035926020909101359150565b5f60208284031215611249575f80fd5b61112782611179565b5f8060408385031215611263575f80fd5b8235915061127360208401611179565b90509250929050565b5f805f6060848603121561128e575f80fd5b8335925061120960208501611179565b5f80604083850312156112af575f80fd5b6112b883611179565b9150602083013580151581146112cc575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f80608085870312156112fe575f80fd5b61130785611179565b935061131560208601611179565b925060408501359150606085013567ffffffffffffffff80821115611338575f80fd5b818701915087601f83011261134b575f80fd5b81358181111561135d5761135d6112d7565b604051601f8201601f19908116603f01168101908382118183101715611385576113856112d7565b816040528281528a602084870101111561139d575f80fd5b826020860160208301375f60208483010152809550505050505092959194509250565b5f805f604084860312156113d2575f80fd5b83359250602084013567ffffffffffffffff808211156113f0575f80fd5b818601915086601f830112611403575f80fd5b813581811115611411575f80fd5b876020828501011115611422575f80fd5b6020830194508093505050509250925092565b5f8060408385031215611446575f80fd5b61144f83611179565b915061127360208401611179565b5f806020838503121561146e575f80fd5b823567ffffffffffffffff80821115611485575f80fd5b818501915085601f830112611498575f80fd5b8135818111156114a6575f80fd5b8660208260051b85010111156114ba575f80fd5b60209290920196919550909350505050565b602080825282518282018190525f919060409081850190868401855b8281101561151657815180516001600160a01b031685528601518685015292840192908501906001016114e8565b5091979650505050505050565b600181811c9082168061153757607f821691505b60208210810361155557634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f5f1982036115945761159461156f565b5060010190565b808201808211156105445761054461156f565b601f82111561067e575f81815260208120601f850160051c810160208610156115d45750805b601f850160051c820191505b8181101561080d578281556001016115e0565b815167ffffffffffffffff81111561160d5761160d6112d7565b6116218161161b8454611523565b846115ae565b602080601f831160018114611654575f841561163d5750858301515b5f19600386901b1c1916600185901b17855561080d565b5f85815260208120601f198616915b8281101561168257888601518255948401946001909101908401611663565b508582101561169f57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f6001600160a01b038087168352808616602084015250836040830152608060608301526116e060808301846110d2565b9695505050505050565b5f602082840312156116fa575f80fd5b81516111278161112e56fea26469706673582212208e1307ee7a66bc1f2e2fda735a59249b6dd51c9bd0c2033ad309287deab3cca064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610149575f3560e01c80636352211e116100c7578063b88d4fde1161007d578063de572b7611610063578063de572b761461034e578063e985e9c514610361578063f39452821461039c575f80fd5b8063b88d4fde14610328578063b9f4be1e1461033b575f80fd5b806394bf804d116100ad57806394bf804d146102c6578063a17d2961146102d9578063a22cb46514610315575f80fd5b80636352211e146102a057806370a08231146102b3575f80fd5b80631f4571ad1161011c57806342842e0e1161010257806342842e0e146101ff57806348f3c51c146102125780635fe975d814610260575f80fd5b80631f4571ad146101d957806323b872dd146101ec575f80fd5b80630178fe3f1461014d57806301ffc9a714610176578063081812fc14610199578063095ea7b3146101c4575b5f80fd5b61016061015b3660046110bb565b6103bc565b60405161016d9190611115565b60405180910390f35b61018961018436600461115e565b610466565b604051901515815260200161016d565b6101ac6101a73660046110bb565b61054a565b6040516001600160a01b03909116815260200161016d565b6101d76101d236600461118f565b6105bc565b005b6101d76101e73660046111b7565b610672565b6101d76101fa3660046111e0565b610683565b6101d761020d3660046111e0565b610815565b6102416102203660046110bb565b5f908152602081905260409020549067ffffffffffffffff60b883901c1690565b604080516001600160a01b03909316835260208301919091520161016d565b61029261026e366004611219565b5f918252600460209081526040808420338552825280842092845291905290205490565b60405190815260200161016d565b6101ac6102ae3660046110bb565b61082f565b6102926102c1366004611239565b61086c565b6101d76102d4366004611252565b6108ba565b6102926102e736600461127c565b5f9283526004602090815260408085206001600160a01b039490941685529281528284209184525290205490565b6101d761032336600461129e565b6108ca565b6101d76103363660046112eb565b6108d5565b6101d76103493660046113c0565b610a69565b61016061035c366004611252565b610aa9565b61018961036f366004611435565b6001600160a01b039182165f90815260026020908152604080832093909416825291909152205460ff1690565b6103af6103aa36600461145d565b610b5d565b60405161016d91906114cc565b5f81815260056020908152604080832033845290915290208054606091906103e390611523565b80601f016020809104026020016040519081016040528092919081815260200182805461040f90611523565b801561045a5780601f106104315761010080835404028352916020019161045a565b820191905f5260205f20905b81548152906001019060200180831161043d57829003601f168201915b50505050509050919050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806104f857507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061054457507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b5f81815260208190526040812054600160ff1b808216146001600160a01b038216610590576040516338077a2b60e01b8152600481018590526024015b60405180910390fd5b80156105b3575050505f908152600360205260409020546001600160a01b031690565b505f9392505050565b5f818152602081905260409020546affffffffffffffffffffff60a082901c166001600160a01b038216610606576040516338077a2b60e01b815260048101849052602401610587565b336001600160a01b0383161480159061064257506001600160a01b0382165f90815260026020908152604080832033845290915290205460ff16155b156106605760405163ea8e4eb560e01b815260040160405180910390fd5b61066c82828686610c74565b50505050565b61067e83338484610d9d565b505050565b5f818152602081905260409020546affffffffffffffffffffff60a082901c16600160ff1b808316146001600160a01b0383166106d6576040516338077a2b60e01b815260048101859052602401610587565b826001600160a01b0316866001600160a01b031614610734576040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808816600483015284166024820152604401610587565b6001600160a01b038516158061075257506001600160a01b03851630145b1561077b57604051634726455360e11b81526001600160a01b0386166004820152602401610587565b336001600160a01b038716146107fb578080156107ad57505f848152600360205260409020546001600160a01b031633145b1580156107dd57506001600160a01b0386165f90815260026020908152604080832033845290915290205460ff16155b156107fb5760405163ea8e4eb560e01b815260040160405180910390fd5b61080d868686601886901c1515610e06565b505050505050565b61067e83838360405180602001604052805f8152506108d5565b5f818152602081905260409020546001600160a01b038116610867576040516338077a2b60e01b815260048101839052602401610587565b919050565b5f6001600160a01b03821661089f57604051634726455360e11b81526001600160a01b0383166004820152602401610587565b506001600160a01b03165f9081526001602052604090205490565b6108c65f82845f610e06565b5050565b6108c6338383610ea0565b5f828152602081905260409020546affffffffffffffffffffff60a082901c16600160ff1b808316146001600160a01b038316610928576040516338077a2b60e01b815260048101869052602401610587565b866001600160a01b0316836001600160a01b031614610986576040517f23295f0e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808916600483015284166024820152604401610587565b6001600160a01b03861615806109a457506001600160a01b03861630145b156109cd57604051634726455360e11b81526001600160a01b0387166004820152602401610587565b336001600160a01b03881614610a4d578080156109ff57505f858152600360205260409020546001600160a01b031633145b158015610a2f57506001600160a01b0387165f90815260026020908152604080832033845290915290205460ff16155b15610a4d5760405163ea8e4eb560e01b815260040160405180910390fd5b610a60878787601886901c151588610f2b565b50505050505050565b61067e833384848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610f9192505050565b5f8281526005602090815260408083206001600160a01b03851684529091529020805460609190610ad990611523565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0590611523565b8015610b505780601f10610b2757610100808354040283529160200191610b50565b820191905f5260205f20905b815481529060010190602001808311610b3357829003601f168201915b5050505050905092915050565b60608167ffffffffffffffff811115610b7857610b786112d7565b604051908082528060200260200182016040528015610bbc57816020015b604080518082019091525f8082526020820152815260200190600190039081610b965790505b5090505f5b82811015610c6d575f805f868685818110610bde57610bde61155b565b9050602002013581526020019081526020015f2054905080838381518110610c0857610c0861155b565b60200260200101515f01906001600160a01b031690816001600160a01b03168152505060b881901c67ffffffffffffffff16838381518110610c4c57610c4c61155b565b60209081029190910181015101525080610c6581611583565b915050610bc1565b5092915050565b601883901c5f610c8585600161159b565b905081601882901c14610cc4576040517fadc1557200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416610cf6575f83815260208190526040902060a082901b6001600160a01b038816179055610d54565b5f838152602081815260408083206001600160a01b038a811660a087901b17600160ff1b17909155600390925290912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169186169190911790555b82846001600160a01b0316876001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b5f8481526004602090815260408083206001600160a01b0387168085529083528184208685528352928190208490555183815284929187917f275d1a91488ccf26ab5b0e053c0c504543aa7e61d4191e59262abb72bd180722910160405180910390a450505050565b6001600160a01b0383165f908152600160208190526040909120805490910190558015610e4c576001600160a01b0384165f90815260016020526040902080545f190190555b5f828152602081905260408082204360b81b6001600160a01b0380881691821790925591518593918816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b610f3785858585610e06565b6001600160a01b0384163b15610f8a57610f543386868685610ff7565b610f8a576040517f4e472e5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b5f8381526005602090815260408083206001600160a01b03861684529091529020610fbc82826115f3565b50816001600160a01b0316837f12ea17a7f0a5d5ec5cdb131f323f2226cc1c8edf52ad8e4ce1e44608903158b783604051610f1e9190611115565b5f80846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b815260040161102b94939291906116af565b6020604051808303815f875af1158015611047573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061106b91906116ea565b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b5f602082840312156110cb575f80fd5b5035919050565b5f81518084525f5b818110156110f6576020818501810151868301820152016110da565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f61112760208301846110d2565b9392505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461115b575f80fd5b50565b5f6020828403121561116e575f80fd5b81356111278161112e565b80356001600160a01b0381168114610867575f80fd5b5f80604083850312156111a0575f80fd5b6111a983611179565b946020939093013593505050565b5f805f606084860312156111c9575f80fd5b505081359360208301359350604090920135919050565b5f805f606084860312156111f2575f80fd5b6111fb84611179565b925061120960208501611179565b9150604084013590509250925092565b5f806040838503121561122a575f80fd5b50508035926020909101359150565b5f60208284031215611249575f80fd5b61112782611179565b5f8060408385031215611263575f80fd5b8235915061127360208401611179565b90509250929050565b5f805f6060848603121561128e575f80fd5b8335925061120960208501611179565b5f80604083850312156112af575f80fd5b6112b883611179565b9150602083013580151581146112cc575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f80608085870312156112fe575f80fd5b61130785611179565b935061131560208601611179565b925060408501359150606085013567ffffffffffffffff80821115611338575f80fd5b818701915087601f83011261134b575f80fd5b81358181111561135d5761135d6112d7565b604051601f8201601f19908116603f01168101908382118183101715611385576113856112d7565b816040528281528a602084870101111561139d575f80fd5b826020860160208301375f60208483010152809550505050505092959194509250565b5f805f604084860312156113d2575f80fd5b83359250602084013567ffffffffffffffff808211156113f0575f80fd5b818601915086601f830112611403575f80fd5b813581811115611411575f80fd5b876020828501011115611422575f80fd5b6020830194508093505050509250925092565b5f8060408385031215611446575f80fd5b61144f83611179565b915061127360208401611179565b5f806020838503121561146e575f80fd5b823567ffffffffffffffff80821115611485575f80fd5b818501915085601f830112611498575f80fd5b8135818111156114a6575f80fd5b8660208260051b85010111156114ba575f80fd5b60209290920196919550909350505050565b602080825282518282018190525f919060409081850190868401855b8281101561151657815180516001600160a01b031685528601518685015292840192908501906001016114e8565b5091979650505050505050565b600181811c9082168061153757607f821691505b60208210810361155557634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f5f1982036115945761159461156f565b5060010190565b808201808211156105445761054461156f565b601f82111561067e575f81815260208120601f850160051c810160208610156115d45750805b601f850160051c820191505b8181101561080d578281556001016115e0565b815167ffffffffffffffff81111561160d5761160d6112d7565b6116218161161b8454611523565b846115ae565b602080601f831160018114611654575f841561163d5750858301515b5f19600386901b1c1916600185901b17855561080d565b5f85815260208120601f198616915b8281101561168257888601518255948401946001909101908401611663565b508582101561169f57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f6001600160a01b038087168352808616602084015250836040830152608060608301526116e060808301846110d2565b9695505050505050565b5f602082840312156116fa575f80fd5b81516111278161112e56fea26469706673582212208e1307ee7a66bc1f2e2fda735a59249b6dd51c9bd0c2033ad309287deab3cca064736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidAddress(address)": [
        {
          "params": {
            "addr": "invalid address"
          }
        }
      ],
      "NonExistentToken(uint256)": [
        {
          "params": {
            "tokenID": "id of the expected token"
          }
        }
      ],
      "NotOwner(address,address)": [
        {
          "params": {
            "currentOwner": "the current owner",
            "provided": "the address expected to be the current owner"
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "params": {
          "approved": "account who can know transfer on the owner's behalf",
          "owner": "current owner of the token",
          "tokenID": "id of the token being approved"
        }
      },
      "ApprovalForAll(address,address,bool)": {
        "params": {
          "approved": "whether it is approved or not",
          "operator": "account who can know transfer on the owner's behalf",
          "owner": "the account granting rights over all of its token"
        }
      },
      "Transfer(address,address,uint256)": {
        "params": {
          "from": "the account the token is sent from",
          "to": "the account the token is sent to",
          "tokenID": "id of the token being sent"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "The address receiving the approval.",
          "tokenID": "The id of the token."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "balance": "The number of tokens owned by the address."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenID": "The id of the token."
        },
        "returns": {
          "operator": "The address of the operator."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "params": {
          "tokenIDs": "The list of token ids to check."
        },
        "returns": {
          "ownersData": "The list of (owner, lastTransferBlockNumber) for each ids given as input."
        }
      },
      "ownerAndLastTransferBlockNumberOf(uint256)": {
        "params": {
          "tokenID": "The id of the token."
        },
        "returns": {
          "blockNumber": "The blocknumber at which the last transfer of that id happened.",
          "owner": "The address of the token owner."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenID": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "to": "The recipient of the token.",
          "tokenID": "The id of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "to": "The recipient of the token.",
          "tokenID": "The id of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "to": "The recipient of the token.",
          "tokenID": "The id of the token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidAddress(address)": [
        {
          "notice": "An invalid address is specified (for example: zero address)"
        }
      ],
      "NonExistentToken(uint256)": [
        {
          "notice": "The token does not exist"
        }
      ],
      "NonceOverflow()": [
        {
          "notice": "The Nonce overflowed, make a transfer to self to allow new nonces."
        }
      ],
      "NotAuthorized()": [
        {
          "notice": "Not authorized to perform this operation"
        }
      ],
      "NotOwner(address,address)": [
        {
          "notice": "The address from which the token is sent is not the current owner"
        }
      ],
      "TransferRejected()": [
        {
          "notice": "The Transfer was rejected by the destination"
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "Triggered when a token is approved to be sent by another account  Note tat the approval get reset when a Transfer event for that same token is emitted."
      },
      "ApprovalForAll(address,address,bool)": {
        "notice": "Triggered when an account approve or disaprove another to transfer on its behalf"
      },
      "Transfer(address,address,uint256)": {
        "notice": "Triggered when a token is transferred"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to transfer a specific token on the senders behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "getData(uint256)": {
        "notice": "return the character's data for the caller's namespace"
      },
      "getDataFor(uint256,address)": {
        "notice": "return the character's data for the provided namespace"
      },
      "getSlot(uint256,uint256)": {
        "notice": "return the character's slot data for the caller's namespace"
      },
      "getSlotFor(uint256,address,uint256)": {
        "notice": "return the character's slot data for the provided namespace"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator to transfer any of its tokens."
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "notice": "Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism."
      },
      "ownerAndLastTransferBlockNumberOf(uint256)": {
        "notice": "Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism."
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setData(uint256,bytes)": {
        "notice": "set the character's data on the caller's namespace"
      },
      "setSlot(uint256,uint256,bytes32)": {
        "notice": "set the character's slot data on the caller's namespace"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8150,
        "contract": "src/Characters.sol:Characters",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8154,
        "contract": "src/Characters.sol:Characters",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8160,
        "contract": "src/Characters.sol:Characters",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8164,
        "contract": "src/Characters.sol:Characters",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11527,
        "contract": "src/Characters.sol:Characters",
        "label": "_slots",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bytes32)))"
      },
      {
        "astId": 11533,
        "contract": "src/Characters.sol:Characters",
        "label": "_data",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bytes_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes32)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "args_data": "0x",
  "tx_hash": "0x",
  "data": "0x"
}